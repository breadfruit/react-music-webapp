{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Desktop/react-music-webapp/src/application/SongList/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { SongList, SongItem } from \"./style\";\nimport { getName } from '../../api/utils';\nimport { ONE_PAGE_COUNT } from '../../api/config';\nimport { connect } from 'react-redux';\nimport { changePlayList, changeCurrentIndex, changeSequecePlayList } from '../Player/store/actionCreators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SongsList = /*#__PURE__*/React.forwardRef(_c = _s((props, refs) => {\n  _s();\n\n  const [startIndex, setStartIndex] = useState(0);\n  const {\n    songs,\n    collectCount,\n    showCollect,\n    loading = false,\n    usePageSplit\n  } = props;\n  const {\n    musicAnimation\n  } = props;\n  const {\n    changePlayListDispatch,\n    changeCurrentIndexDispatch,\n    changeSequecePlayListDispatch\n  } = props;\n  const totalCount = songs.length;\n  useEffect(() => {\n    if (!loading) return;\n    if (startIndex + 1 + ONE_PAGE_COUNT >= totalCount) return;\n    setStartIndex(startIndex + ONE_PAGE_COUNT);\n  }, [loading, startIndex, totalCount]);\n\n  const selectItem = (e, index) => {\n    //修改当前播放列表\n    changePlayListDispatch(songs); //加入播放歌单\n\n    changeSequecePlayListDispatch(songs); //修改当前播放歌曲的id\n\n    changeCurrentIndexDispatch(index);\n    musicAnimation(e.nativeEvent.clientX, e.nativeEvent.clientY);\n  };\n\n  let songList = list => {\n    let res = []; // 判断页数是否超过总数\n\n    let end = usePageSplit ? startIndex + ONE_PAGE_COUNT : list.length;\n\n    for (let i = 0; i < end; i++) {\n      if (i >= list.length) break;\n      let item = list[i];\n      res.push(\n      /*#__PURE__*/\n      // 对每一首歌曲提前获取歌曲的播放链接\n      _jsxDEV(\"li\", {\n        onClick: e => selectItem(e, i),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"index\",\n          children: i + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: getName(item)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this));\n    }\n\n    return res;\n  };\n\n  const collect = count => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add_list\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"iconfont\",\n        children: \"\\uE62D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u6536\\u85CF(\", Math.floor(count / 1000) / 10, \"\\u4E07)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this) // <div className=\"isCollected\">\n    //   <span>已收藏({Math.floor(count/1000)/10}万)</span>\n    // </div>\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(SongList, {\n    ref: refs,\n    showBackground: props.showBackground,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"first_line\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"play_all\",\n        onClick: e => selectItem(e, 0),\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"iconfont\",\n          children: \"\\uE6E3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\u64AD\\u653E\\u5168\\u90E8 \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sum\",\n            children: [\"(\\u5171\", totalCount, \"\\u9996)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), showCollect ? collect(collectCount) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SongItem, {\n      children: songList(songs)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}, \"xONUAB7K55wruasu3W4M4x13F+I=\")); // 映射Redux全局的state到组件的props上\n\n_c2 = SongsList;\n\nconst mapStateToProps = state => ({\n  fullScreen: state.getIn(['player', 'fullScreen']),\n  playing: state.getIn(['player', 'playing']),\n  currentSong: state.getIn(['player', 'currentSong']),\n  scrollY: state.getIn(['album', 'scrollY'])\n}); // 映射dispatch到props上\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changePlayListDispatch(data) {\n      dispatch(changePlayList(data));\n    },\n\n    changeCurrentIndexDispatch(data) {\n      dispatch(changeCurrentIndex(data));\n    },\n\n    changeSequecePlayListDispatch(data) {\n      dispatch(changeSequecePlayList(data));\n    }\n\n  };\n}; // 将ui组件包装成容器组件\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/React.memo(SongsList));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SongsList$React.forwardRef\");\n$RefreshReg$(_c2, \"SongsList\");","map":{"version":3,"sources":["/Users/macos/Desktop/react-music-webapp/src/application/SongList/index.js"],"names":["React","useState","useEffect","SongList","SongItem","getName","ONE_PAGE_COUNT","connect","changePlayList","changeCurrentIndex","changeSequecePlayList","SongsList","forwardRef","props","refs","startIndex","setStartIndex","songs","collectCount","showCollect","loading","usePageSplit","musicAnimation","changePlayListDispatch","changeCurrentIndexDispatch","changeSequecePlayListDispatch","totalCount","length","selectItem","e","index","nativeEvent","clientX","clientY","songList","list","res","end","i","item","push","name","id","collect","count","Math","floor","showBackground","mapStateToProps","state","fullScreen","getIn","playing","currentSong","scrollY","mapDispatchToProps","dispatch","data","memo"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from 'react';\nimport { SongList, SongItem } from \"./style\";\nimport { getName } from '../../api/utils';\nimport { ONE_PAGE_COUNT } from '../../api/config';\nimport { connect } from 'react-redux';\nimport { changePlayList, changeCurrentIndex, changeSequecePlayList } from '../Player/store/actionCreators';\n\n\nconst SongsList = React.forwardRef((props, refs)=> {\n\n  const [startIndex, setStartIndex] = useState(0);\n  \n \n  const { songs, collectCount, showCollect,loading=false, usePageSplit } = props;\n\n  const { musicAnimation } = props;\n\n  const { changePlayListDispatch, changeCurrentIndexDispatch, changeSequecePlayListDispatch } = props;\n  const totalCount = songs.length;\n\n  useEffect(() => {\n    if(!loading) return;\n    if(startIndex + 1 + ONE_PAGE_COUNT >= totalCount)\n      return;\n    setStartIndex(startIndex + ONE_PAGE_COUNT);\n  }, [loading, startIndex, totalCount]);\n\n  const selectItem = (e, index) => {\n\n    //修改当前播放列表\n    changePlayListDispatch(songs);\n    //加入播放歌单\n    changeSequecePlayListDispatch(songs);\n    //修改当前播放歌曲的id\n    changeCurrentIndexDispatch(index);\n    musicAnimation(e.nativeEvent.clientX, e.nativeEvent.clientY);\n  }\n\n  let songList = (list) => {\n    let res = [];\n    // 判断页数是否超过总数\n    let end = usePageSplit ? startIndex + ONE_PAGE_COUNT : list.length;\n    for(let i = 0; i < end; i++) {\n      if(i >= list.length) break;\n      let item = list[i];\n      res.push(\n        // 对每一首歌曲提前获取歌曲的播放链接\n        <li key={item.id} onClick={(e) => selectItem(e, i)}>\n          <span className=\"index\">{i + 1}</span>\n          <div className=\"info\">\n            <span>{item.name}</span>\n            <span>\n              \n              {/* { item.ar ? getName(item.ar): getName(item.artists) } - { item.al ? item.al.name : item.album.name} */}\n              {getName(item)}\n            </span>\n          </div>\n        </li>\n      )\n    }\n    return res;\n  };\n\n  const collect = (count) => {\n    return  (\n      <div className=\"add_list\">\n        <i className=\"iconfont\">&#xe62d;</i>\n        <span>收藏({Math.floor(count/1000)/10}万)</span>\n      </div>\n      // <div className=\"isCollected\">\n      //   <span>已收藏({Math.floor(count/1000)/10}万)</span>\n      // </div>\n    )\n  };\n  return (\n    <SongList ref={refs} showBackground={props.showBackground}>\n      <div className=\"first_line\">\n        <div className=\"play_all\" onClick={(e) => selectItem(e, 0)}>\n          <i className=\"iconfont\">&#xe6e3;</i>\n          <span>播放全部 <span className=\"sum\">(共{totalCount}首)</span></span>\n        </div>\n        { showCollect ? collect(collectCount) : null}\n      </div>\n      <SongItem>\n        { songList(songs) }\n      </SongItem>\n    </SongList>\n  )\n});\n\n\n// 映射Redux全局的state到组件的props上\nconst mapStateToProps = (state) => ({\n  fullScreen: state.getIn(['player', 'fullScreen']),\n  playing: state.getIn(['player', 'playing']),\n  currentSong: state.getIn(['player', 'currentSong']),\n  scrollY: state.getIn(['album', 'scrollY'])  \n});\n// 映射dispatch到props上\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    changePlayListDispatch(data){\n      dispatch(changePlayList(data));\n    },\n    changeCurrentIndexDispatch(data) {\n      dispatch(changeCurrentIndex(data));\n    },\n    changeSequecePlayListDispatch(data) {\n      dispatch(changeSequecePlayList(data))\n    }\n  }\n};\n\n\n// 将ui组件包装成容器组件\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(SongsList));"]},"metadata":{},"sourceType":"module"}