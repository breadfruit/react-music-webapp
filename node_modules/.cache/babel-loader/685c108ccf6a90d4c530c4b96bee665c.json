{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Desktop/react-music-webapp/src/application/Singer/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { Container } from \"./style\";\nimport { ImgWrapper, CollectButton, SongListWrapper, BgLayer } from \"./style\";\nimport Header from \"../../baseUI/header/index\";\nimport Scroll from \"../../baseUI/scroll/index\";\nimport SongsList from \"../SongList\";\nimport Loading from \"./../../baseUI/loading/index\";\nimport { getSingerInfo, changeEnterLoading } from \"./store/actionCreators\";\nimport { connect } from 'react-redux';\nimport { HEADER_HEIGHT } from \"./../../api/config\";\nimport MusicNote from \"../../baseUI/music-note/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Singer(props) {\n  _s();\n\n  const musicNoteRef = useRef();\n\n  const musicAnimation = (x, y) => {\n    musicNoteRef.current.startAnimation({\n      x,\n      y\n    });\n  };\n\n  const setShowStatusFalse = useCallback(() => {\n    setShowStatus(false);\n  }, []);\n  const {\n    artist: immutableArtist,\n    songs: immutableSongs,\n    loading\n  } = props;\n  const {\n    getSingerDataDispatch\n  } = props;\n  const id = props.match.params.id;\n  useEffect(() => {\n    getSingerDataDispatch(id);\n  }, [getSingerDataDispatch, id]);\n  const artist = immutableArtist ? immutableArtist.toJS() : [];\n  const songs = immutableSongs ? immutableSongs.toJS() : [];\n  const [showStatus, setShowStatus] = useState(true);\n  const collectButton = useRef();\n  const imageWrapper = useRef();\n  const songScrollWrapper = useRef();\n  const songScroll = useRef();\n  const header = useRef();\n  const layer = useRef(); // 图片初始高度\n\n  const initialHeight = useRef(0); // 往上偏移的尺寸，露出圆角\n\n  const OFFSET = 5;\n  useEffect(() => {\n    let h = imageWrapper.current.offsetHeight;\n    initialHeight.current = h;\n    songScrollWrapper.current.style.top = `${h - OFFSET}px`; //把遮罩先放在下面，以裹住歌曲列表\n\n    layer.current.style.top = `${h - OFFSET}px`;\n    songScroll.current.refresh();\n    console.log('songs----', songs); // eslint-disable-next-line\n  }, []);\n\n  const handleScroll = pos => {\n    let height = initialHeight.current;\n    const newY = pos.y;\n    const imageDOM = imageWrapper.current;\n    const buttonDOM = collectButton.current;\n    const headerDOM = header.current;\n    const layerDOM = layer.current;\n    const minScrollY = -(height - OFFSET) + HEADER_HEIGHT;\n    const percent = Math.abs(newY / height); //说明: 在歌手页的布局中，歌单列表其实是没有自己的背景的，layerDOM其实是起一个遮罩的作用，给歌单内容提供白色背景\n    //因此在处理的过程中，随着内容的滚动，遮罩也跟着移动\n\n    if (newY > 0) {\n      //处理往下拉的情况,效果：图片放大，按钮跟着偏移\n      imageDOM.style[\"transform\"] = `scale(${1 + percent})`;\n      buttonDOM.style[\"transform\"] = `translate3d(0, ${newY}px, 0)`;\n      layerDOM.style.top = `${height - OFFSET + newY}px`;\n    } else if (newY >= minScrollY) {\n      //往上滑动，但是还没超过Header部分\n      layerDOM.style.top = `${height - OFFSET - Math.abs(newY)}px`;\n      layerDOM.style.zIndex = 1;\n      imageDOM.style.paddingTop = \"75%\";\n      imageDOM.style.height = 0;\n      imageDOM.style.zIndex = -1;\n      buttonDOM.style[\"transform\"] = `translate3d(0, ${newY}px, 0)`;\n      buttonDOM.style[\"opacity\"] = `${1 - percent * 2}`;\n    } else if (newY < minScrollY) {\n      //往上滑动，但是超过Header部分\n      layerDOM.style.top = `${HEADER_HEIGHT - OFFSET}px`;\n      layerDOM.style.zIndex = 1; //防止溢出的歌单内容遮住Header\n\n      headerDOM.style.zIndex = 100; //此时图片高度与Header一致\n\n      imageDOM.style.height = `${HEADER_HEIGHT}px`;\n      imageDOM.style.paddingTop = 0;\n      imageDOM.style.zIndex = 99;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CSSTransition, {\n    in: showStatus,\n    timeout: 300,\n    classNames: \"fly\",\n    appear: true,\n    unmountOnExit: true,\n    onExited: () => props.history.goBack(),\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: \"头部\",\n        ref: header\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ImgWrapper, {\n        ref: imageWrapper,\n        bgUrl: artist.picUrl,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CollectButton, {\n        ref: collectButton,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"iconfont\",\n          children: \"\\uE62D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text\",\n          children: \"\\u6536\\u85CF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BgLayer, {\n        ref: layer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SongListWrapper, {\n        ref: songScrollWrapper,\n        children: /*#__PURE__*/_jsxDEV(Scroll, {\n          ref: songScroll,\n          onScroll: handleScroll,\n          children: /*#__PURE__*/_jsxDEV(SongsList, {\n            songs: songs,\n            showCollect: true,\n            musicAnimation: musicAnimation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 29\n      }, this) : null, /*#__PURE__*/_jsxDEV(MusicNote, {\n        ref: musicNoteRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n} // 映射Redux全局的state到组件的props上\n\n\n_s(Singer, \"S8ofMOn8pFnteHyzHxXK70/HW+E=\");\n\n_c = Singer;\n\nconst mapStateToProps = state => ({\n  artist: state.getIn([\"singerInfo\", \"artist\"]),\n  songs: state.getIn([\"singerInfo\", \"songsOfArtist\"]),\n  loading: state.getIn([\"singerInfo\", \"loading\"])\n}); // 映射dispatch到props上\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getSingerDataDispatch(id) {\n      dispatch(changeEnterLoading(true));\n      dispatch(getSingerInfo(id));\n    }\n\n  };\n}; // 将ui组件包装成容器组件\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/React.memo(Singer));\n\nvar _c;\n\n$RefreshReg$(_c, \"Singer\");","map":{"version":3,"sources":["/Users/macos/Desktop/react-music-webapp/src/application/Singer/index.js"],"names":["React","useState","useEffect","useRef","useCallback","CSSTransition","Container","ImgWrapper","CollectButton","SongListWrapper","BgLayer","Header","Scroll","SongsList","Loading","getSingerInfo","changeEnterLoading","connect","HEADER_HEIGHT","MusicNote","Singer","props","musicNoteRef","musicAnimation","x","y","current","startAnimation","setShowStatusFalse","setShowStatus","artist","immutableArtist","songs","immutableSongs","loading","getSingerDataDispatch","id","match","params","toJS","showStatus","collectButton","imageWrapper","songScrollWrapper","songScroll","header","layer","initialHeight","OFFSET","h","offsetHeight","style","top","refresh","console","log","handleScroll","pos","height","newY","imageDOM","buttonDOM","headerDOM","layerDOM","minScrollY","percent","Math","abs","zIndex","paddingTop","history","goBack","picUrl","mapStateToProps","state","getIn","mapDispatchToProps","dispatch","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { Container } from \"./style\";\nimport { ImgWrapper, CollectButton, SongListWrapper, BgLayer } from \"./style\";\nimport Header from \"../../baseUI/header/index\";\nimport Scroll from \"../../baseUI/scroll/index\";\nimport SongsList from \"../SongList\";\nimport Loading from \"./../../baseUI/loading/index\";\nimport { getSingerInfo, changeEnterLoading } from \"./store/actionCreators\";\nimport { connect } from 'react-redux'\nimport { HEADER_HEIGHT } from \"./../../api/config\";\nimport MusicNote from \"../../baseUI/music-note/index\";\n\nfunction Singer(props) {\n    const musicNoteRef = useRef ();\n    const musicAnimation = (x, y) => {\n        musicNoteRef.current.startAnimation ({ x, y });\n      };\n    const setShowStatusFalse = useCallback(() => {\n        setShowStatus(false);\n    }, []);\n\n    const {\n        artist: immutableArtist,\n        songs: immutableSongs,\n        loading,\n    } = props;\n\n    const { getSingerDataDispatch } = props;\n\n    const id = props.match.params.id;\n    useEffect(() => {\n        getSingerDataDispatch(id);\n    }, [getSingerDataDispatch, id])\n\n\n    const artist = immutableArtist ? immutableArtist.toJS() : [];\n    const songs = immutableSongs ? immutableSongs.toJS() : [];\n\n    const [showStatus, setShowStatus] = useState(true);\n\n    const collectButton = useRef();\n    const imageWrapper = useRef();\n    const songScrollWrapper = useRef();\n    const songScroll = useRef();\n    const header = useRef();\n    const layer = useRef();\n    // 图片初始高度\n    const initialHeight = useRef(0);\n\n    // 往上偏移的尺寸，露出圆角\n    const OFFSET = 5;\n\n\n    useEffect(() => {\n        let h = imageWrapper.current.offsetHeight;\n        initialHeight.current = h;\n        songScrollWrapper.current.style.top = `${h - OFFSET}px`;\n        //把遮罩先放在下面，以裹住歌曲列表\n        layer.current.style.top = `${h - OFFSET}px`;\n        songScroll.current.refresh();\n        console.log('songs----', songs)\n        // eslint-disable-next-line\n    }, []);\n\n    const handleScroll = pos => {\n        let height = initialHeight.current;\n        const newY = pos.y;\n        const imageDOM = imageWrapper.current;\n        const buttonDOM = collectButton.current;\n        const headerDOM = header.current;\n        const layerDOM = layer.current;\n        const minScrollY = -(height - OFFSET) + HEADER_HEIGHT;\n\n        const percent = Math.abs(newY / height);\n        //说明: 在歌手页的布局中，歌单列表其实是没有自己的背景的，layerDOM其实是起一个遮罩的作用，给歌单内容提供白色背景\n        //因此在处理的过程中，随着内容的滚动，遮罩也跟着移动\n        if (newY > 0) {\n            //处理往下拉的情况,效果：图片放大，按钮跟着偏移\n            imageDOM.style[\"transform\"] = `scale(${1 + percent})`;\n            buttonDOM.style[\"transform\"] = `translate3d(0, ${newY}px, 0)`;\n            layerDOM.style.top = `${height - OFFSET + newY}px`;\n        } else if (newY >= minScrollY) {\n            //往上滑动，但是还没超过Header部分\n            layerDOM.style.top = `${height - OFFSET - Math.abs(newY)}px`;\n            layerDOM.style.zIndex = 1;\n            imageDOM.style.paddingTop = \"75%\";\n            imageDOM.style.height = 0;\n            imageDOM.style.zIndex = -1;\n            buttonDOM.style[\"transform\"] = `translate3d(0, ${newY}px, 0)`;\n            buttonDOM.style[\"opacity\"] = `${1 - percent * 2}`;\n        } else if (newY < minScrollY) {\n            //往上滑动，但是超过Header部分\n            layerDOM.style.top = `${HEADER_HEIGHT - OFFSET}px`;\n            layerDOM.style.zIndex = 1;\n            //防止溢出的歌单内容遮住Header\n            headerDOM.style.zIndex = 100;\n            //此时图片高度与Header一致\n            imageDOM.style.height = `${HEADER_HEIGHT}px`;\n            imageDOM.style.paddingTop = 0;\n            imageDOM.style.zIndex = 99;\n        }\n    };\n\n    return (\n        <CSSTransition\n            in={showStatus}\n            timeout={300}\n            classNames=\"fly\"\n            appear={true}\n            unmountOnExit\n            onExited={() => props.history.goBack()}\n        >\n            <Container>\n                <Header \n                title={\"头部\"}\n                ref={header}\n                ></Header>\n                <ImgWrapper ref={imageWrapper} bgUrl={artist.picUrl}>\n                    <div className=\"filter\"></div>\n                </ImgWrapper>\n                <CollectButton ref={collectButton}>\n                    <i className=\"iconfont\">&#xe62d;</i>\n                    <span className=\"text\">收藏</span>\n                </CollectButton>\n                <BgLayer ref={layer}></BgLayer>\n                <SongListWrapper ref={songScrollWrapper} >\n                    <Scroll ref={songScroll} onScroll={handleScroll}>\n                        <SongsList\n                            songs={songs}\n                            showCollect={true}\n                            musicAnimation={musicAnimation}\n                        ></SongsList>\n                    </Scroll>\n                </SongListWrapper>\n                {loading ? (<Loading></Loading>) : null}\n                <MusicNote ref={musicNoteRef}></MusicNote>\n            </Container>\n        </CSSTransition>\n    )\n}\n\n// 映射Redux全局的state到组件的props上\nconst mapStateToProps = state => ({\n    artist: state.getIn([\"singerInfo\", \"artist\"]),\n    songs: state.getIn([\"singerInfo\", \"songsOfArtist\"]),\n    loading: state.getIn([\"singerInfo\", \"loading\"]),\n});\n// 映射dispatch到props上\nconst mapDispatchToProps = dispatch => {\n    return {\n        getSingerDataDispatch(id) {\n            dispatch(changeEnterLoading(true));\n            dispatch(getSingerInfo(id));\n        }\n    };\n};\n\n// 将ui组件包装成容器组件\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Singer));"]},"metadata":{},"sourceType":"module"}