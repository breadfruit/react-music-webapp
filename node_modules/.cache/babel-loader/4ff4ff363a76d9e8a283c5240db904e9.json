{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Desktop/react-music-webapp/src/application/Recommend/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport Slider from '../../components/slider';\nimport RecommendList from '../../components/list';\nimport { connect } from 'react-redux';\nimport * as actionTypes from './store/actionCreators';\nimport Scroll from '../../baseUI/scroll/index';\nimport { Content } from './style';\nimport Loading from '../../baseUI/loading/index';\nimport { forceCheck } from 'react-lazyload';\nimport { renderRoutes } from 'react-router-config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Recommend(props) {\n  _s();\n\n  const {\n    bannerList,\n    recommendList,\n    enterLoading\n  } = props;\n  const {\n    getBannerDataDispatch,\n    getRecommendListDataDispatch\n  } = props; //进行更新视图，初始化\n\n  useEffect(() => {\n    if (!bannerList.size) {\n      getBannerDataDispatch();\n    }\n\n    if (!recommendList.size) {\n      getRecommendListDataDispatch();\n    }\n  }, []);\n  const bannerListJS = bannerList ? bannerList.toJS() : [];\n  const recommendListJS = recommendList ? recommendList.toJS() : [];\n  return /*#__PURE__*/_jsxDEV(Content, {\n    children: [/*#__PURE__*/_jsxDEV(Scroll, {\n      className: \"list\",\n      onScroll: forceCheck,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Slider, {\n          bannerList: bannerListJS\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RecommendList, {\n          recommendList: recommendListJS\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), enterLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 22\n    }, this) : null, renderRoutes(props.route.routes)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n} //输出samrt组件，类似处理业务层\n//告诉父组件需要的state和更新的dispatch\n\n\n_s(Recommend, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Recommend;\n\nconst mapStateToProps = state => ({\n  // 不要在这里将数据 toJS\n  // 不然每次 diff 比对 props 的时候都是不一样的引用，还是导致不必要的重渲染，属于滥用 immutable\n  bannerList: state.getIn(['recommend', 'bannerList']),\n  recommendList: state.getIn(['recommend', 'recommendList']),\n  enterLoading: state.getIn(['recommend', 'enterLoading'])\n});\n\nconst mapDispatchProps = dispatch => {\n  return {\n    getBannerDataDispatch() {\n      //将结果更新视图\n      dispatch(actionTypes.getBannerList());\n    },\n\n    getRecommendListDataDispatch() {\n      dispatch(actionTypes.getRecommendList());\n    }\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)( /*#__PURE__*/React.memo(Recommend));\n\nvar _c;\n\n$RefreshReg$(_c, \"Recommend\");","map":{"version":3,"sources":["/Users/macos/Desktop/react-music-webapp/src/application/Recommend/index.js"],"names":["React","useEffect","Slider","RecommendList","connect","actionTypes","Scroll","Content","Loading","forceCheck","renderRoutes","Recommend","props","bannerList","recommendList","enterLoading","getBannerDataDispatch","getRecommendListDataDispatch","size","bannerListJS","toJS","recommendListJS","route","routes","mapStateToProps","state","getIn","mapDispatchProps","dispatch","getBannerList","getRecommendList","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAO,KAAKC,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SAAQC,OAAR,QAAsB,SAAtB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAAQC,YAAR,QAA2B,qBAA3B;;;AAGA,SAASC,SAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAEzB,QAAM;AAACC,IAAAA,UAAD;AAAaC,IAAAA,aAAb;AAA4BC,IAAAA;AAA5B,MAA4CH,KAAlD;AACA,QAAM;AAAEI,IAAAA,qBAAF;AAAyBC,IAAAA;AAAzB,MAA0DL,KAAhE,CAHyB,CAK3B;;AACEX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACY,UAAU,CAACK,IAAhB,EAAqB;AACnBF,MAAAA,qBAAqB;AACtB;;AACD,QAAI,CAACF,aAAa,CAACI,IAAnB,EAAwB;AACtBD,MAAAA,4BAA4B;AAC7B;AACF,GAPQ,EAON,EAPM,CAAT;AASA,QAAME,YAAY,GAAGN,UAAU,GAAGA,UAAU,CAACO,IAAX,EAAH,GAAwB,EAAvD;AACA,QAAMC,eAAe,GAAGP,aAAa,GAAGA,aAAa,CAACM,IAAd,EAAH,GAA0B,EAA/D;AAEA,sBACE,QAAC,OAAD;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,MAAlB;AAAyB,MAAA,QAAQ,EAAEX,UAAnC;AAAA,6BACE;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,UAAU,EAAEU;AAApB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,aAAD;AAAe,UAAA,aAAa,EAAEE;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAOGN,YAAY,gBAAE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAF,GAAuB,IAPtC,EAQGL,YAAY,CAAEE,KAAK,CAACU,KAAN,CAAYC,MAAd,CARf;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,C,CACD;AACA;;;GAhCSZ,S;;KAAAA,S;;AAiCT,MAAMa,eAAe,GAAIC,KAAD,KAAY;AAClC;AACA;AACAZ,EAAAA,UAAU,EAAEY,KAAK,CAACC,KAAN,CAAa,CAAC,WAAD,EAAc,YAAd,CAAb,CAHsB;AAIlCZ,EAAAA,aAAa,EAAEW,KAAK,CAACC,KAAN,CAAa,CAAC,WAAD,EAAc,eAAd,CAAb,CAJmB;AAKlCX,EAAAA,YAAY,EAAEU,KAAK,CAACC,KAAN,CAAY,CAAC,WAAD,EAAc,cAAd,CAAZ;AALoB,CAAZ,CAAxB;;AAQA,MAAMC,gBAAgB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACLZ,IAAAA,qBAAqB,GAAG;AACtB;AACAY,MAAAA,QAAQ,CAACvB,WAAW,CAACwB,aAAZ,EAAD,CAAR;AACD,KAJI;;AAKLZ,IAAAA,4BAA4B,GAAG;AAC7BW,MAAAA,QAAQ,CAACvB,WAAW,CAACyB,gBAAZ,EAAD,CAAR;AACD;;AAPI,GAAP;AASD,CAVD;;AAYA,eAAe1B,OAAO,CAACoB,eAAD,EAAkBG,gBAAlB,CAAP,eAA2C3B,KAAK,CAAC+B,IAAN,CAAWpB,SAAX,CAA3C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport Slider from '../../components/slider';\nimport RecommendList from '../../components/list';\nimport {connect} from 'react-redux'\nimport * as actionTypes from './store/actionCreators'\nimport Scroll from '../../baseUI/scroll/index'\nimport {Content} from './style'\nimport Loading from '../../baseUI/loading/index'\nimport { forceCheck } from 'react-lazyload';\nimport {renderRoutes} from 'react-router-config'\n\n\nfunction Recommend (props) {\n\n  const {bannerList, recommendList, enterLoading} = props\n  const { getBannerDataDispatch, getRecommendListDataDispatch } = props;\n\n//进行更新视图，初始化\n  useEffect(() => {\n    if (!bannerList.size){\n      getBannerDataDispatch ();\n    }\n    if (!recommendList.size){\n      getRecommendListDataDispatch ();\n    }\n  }, [])\n\n  const bannerListJS = bannerList ? bannerList.toJS () : [];\n  const recommendListJS = recommendList ? recommendList.toJS() : []\n\n  return (\n    <Content>\n      <Scroll className=\"list\" onScroll={forceCheck}>\n        <div>\n          <Slider bannerList={bannerListJS}></Slider>\n          <RecommendList recommendList={recommendListJS}></RecommendList>\n        </div>\n      </Scroll>\n      {enterLoading? <Loading></Loading>: null}\n      {renderRoutes((props.route.routes))}\n    </Content> \n  )\n}\n//输出samrt组件，类似处理业务层\n//告诉父组件需要的state和更新的dispatch\nconst mapStateToProps = (state) => ({\n  // 不要在这里将数据 toJS\n  // 不然每次 diff 比对 props 的时候都是不一样的引用，还是导致不必要的重渲染，属于滥用 immutable\n  bannerList: state.getIn (['recommend', 'bannerList']),\n  recommendList: state.getIn (['recommend', 'recommendList']),\n  enterLoading: state.getIn(['recommend', 'enterLoading'])\n});\n\nconst mapDispatchProps = (dispatch) => {\n  return {\n    getBannerDataDispatch() {\n      //将结果更新视图\n      dispatch(actionTypes.getBannerList())\n    },\n    getRecommendListDataDispatch() {\n      dispatch(actionTypes.getRecommendList())\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchProps)(React.memo(Recommend))"]},"metadata":{},"sourceType":"module"}