{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Desktop/react-music-webapp/src/application/Rank/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { getRankList } from './store/index';\nimport Loading from '../../baseUI/loading';\nimport { List, ListItem, SongList, Container } from './style';\nimport Scroll from '../../baseUI/scroll/index';\nimport { EnterLoading } from './../Singers/style';\nimport { filterIndex } from '../../api/utils';\nimport { renderRoutes } from 'react-router-config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Rank(props) {\n  _s();\n\n  const {\n    rankList: list,\n    loading,\n    songsCount\n  } = props;\n  const {\n    getRankListDataDispatch\n  } = props;\n  let rankList = list ? list.toJS() : [];\n  useEffect(() => {\n    if (!rankList.length) {\n      getRankListDataDispatch();\n    } // eslint-disable-next-line\n\n  }, []);\n\n  const enterDetail = detail => {\n    console.log(detail);\n    props.history.push(`/rank/${detail.id}`);\n  }; // 这是渲染榜单列表函数，传入 global 变量来区分不同的布局方式\n\n\n  const renderRankList = (list, global) => {\n    return /*#__PURE__*/_jsxDEV(List, {\n      globalRank: global,\n      children: list.map(item => {\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          tracks: item.tracks,\n          onClick: () => enterDetail(item),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"img_wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.coverImgUrl,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"decorate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"update_frequecy\",\n              children: item.updateFrequency\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this), renderSongList(item.tracks)]\n        }, item.coverImgId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this);\n  };\n\n  const renderSongList = list => {\n    return list.length ? /*#__PURE__*/_jsxDEV(SongList, {\n      children: list.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [index + 1, \". \", item.first, \" - \", item.second]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this) : null;\n  };\n\n  let globalStartIndex = filterIndex(rankList);\n  let officialList = rankList.slice(0, globalStartIndex);\n  let globalList = rankList.slice(globalStartIndex);\n  let displayStyle = loading ? {\n    \"display\": \"none\"\n  } : {\n    \"display\": \"\"\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Scroll, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"offical\",\n          style: displayStyle,\n          children: \" \\u5B98\\u65B9\\u699C \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this), renderRankList(officialList), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"global\",\n          style: displayStyle,\n          children: \" \\u5168\\u7403\\u699C \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), renderRankList(globalList, true), loading ? /*#__PURE__*/_jsxDEV(EnterLoading, {\n          children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 35\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this), renderRoutes(props.route.routes)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 3\n  }, this);\n} // 映射Redux全局的state到组件的props上\n\n\n_s(Rank, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Rank;\n\nconst mapStateToProps = state => ({\n  rankList: state.getIn(['rank', 'rankList']),\n  loading: state.getIn(['rank', 'loading'])\n}); // 映射dispatch到props上\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getRankListDataDispatch() {\n      dispatch(getRankList());\n    }\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/React.memo(Rank));\n\nvar _c;\n\n$RefreshReg$(_c, \"Rank\");","map":{"version":3,"sources":["/Users/macos/Desktop/react-music-webapp/src/application/Rank/index.js"],"names":["React","useEffect","connect","getRankList","Loading","List","ListItem","SongList","Container","Scroll","EnterLoading","filterIndex","renderRoutes","Rank","props","rankList","list","loading","songsCount","getRankListDataDispatch","toJS","length","enterDetail","detail","console","log","history","push","id","renderRankList","global","map","item","tracks","coverImgUrl","updateFrequency","renderSongList","coverImgId","index","first","second","globalStartIndex","officialList","slice","globalList","displayStyle","route","routes","mapStateToProps","state","getIn","mapDispatchToProps","dispatch","memo"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { getRankList } from './store/index'\nimport Loading from '../../baseUI/loading';\nimport {\n  List, \n  ListItem,\n  SongList,\n  Container\n} from './style';\nimport Scroll from '../../baseUI/scroll/index';\nimport { EnterLoading } from './../Singers/style';\nimport { filterIndex } from '../../api/utils';\nimport { renderRoutes } from 'react-router-config';\n\nfunction Rank(props) {\n  const { rankList:list, loading, songsCount } = props;\n  const { getRankListDataDispatch } = props;\n\n  let rankList = list ? list.toJS() : [];\n\n  useEffect(() => {\n    if(!rankList.length){\n      getRankListDataDispatch();\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const enterDetail = (detail) => {\n    console.log(detail)\n    props.history.push(`/rank/${detail.id}`)\n  }\n// 这是渲染榜单列表函数，传入 global 变量来区分不同的布局方式\nconst renderRankList = (list, global) => {\n  return (\n    <List globalRank={global}>\n      {\n      list.map ((item) => {\n        return (\n          <ListItem key={item.coverImgId} tracks={item.tracks} onClick={() => enterDetail (item)}>\n            <div className=\"img_wrapper\">\n              <img src={item.coverImgUrl} alt=\"\"/>\n              <div className=\"decorate\"></div>\n              <span className=\"update_frequecy\">{item.updateFrequency}</span>\n            </div>\n            { renderSongList (item.tracks)  }\n          </ListItem>\n        )\n      })\n    } \n    </List>\n    \n  )\n}\n\n\n\nconst renderSongList = (list) => {\n  return list.length ? (\n    <SongList>\n      {\n        list.map((item, index) => {\n          return (\n            <li key={index}>{index+1}. {item.first} - {item.second}</li>\n          )\n        })\n      }\n    </SongList>\n  ) : null\n}\n\n\n\n\n\n  let globalStartIndex = filterIndex(rankList);\n  let officialList = rankList.slice(0, globalStartIndex);\n  let globalList = rankList.slice(globalStartIndex);\n  let displayStyle = loading ? {\"display\":\"none\"}:  {\"display\": \"\"};\n\nreturn (\n  <Container>\n    <Scroll>\n      <div>\n        <h1 className=\"offical\" style={displayStyle}> 官方榜 </h1>\n          { renderRankList (officialList) }\n        <h1 className=\"global\" style={displayStyle}> 全球榜 </h1>\n          { renderRankList (globalList, true) }\n        { loading ? <EnterLoading><Loading></Loading></EnterLoading> : null }\n      </div>\n    </Scroll> \n    {renderRoutes (props.route.routes)}\n  </Container>\n  );\n}\n\n// 映射Redux全局的state到组件的props上\nconst mapStateToProps = (state) => ({\n  rankList: state.getIn(['rank', 'rankList']),\n  loading: state.getIn(['rank', 'loading']),\n});\n// 映射dispatch到props上\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getRankListDataDispatch() {\n      dispatch(getRankList());\n    }\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Rank));"]},"metadata":{},"sourceType":"module"}