{"ast":null,"code":"const timeExp = /\\[(\\d{2,}):(\\d{2})(?:[\\.\\:](\\d{2,3}))?]/g;\nconst STATE_PAUSE = 0;\nconst STATE_PLAYING = 1;\nexport default class Lyric {\n  constructor(lrc) {\n    let hanlder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n    let speed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    this.lrc = lrc;\n    this.lines = [];\n    this.hanlder = hanlder;\n    this.state = STATE_PAUSE;\n    this.curLineIndex = 0; // 当前播放歌词所在的行数\n\n    this.startStamp = 0;\n  }\n\n  _initLines() {\n    const lines = this.lrc.split('\\n');\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = this.lines[i]; //获得对应时间戳的文本\n\n      let result = timeExp.exec(line);\n      if (!result) continue;\n      const txt = line.replace(timeExp, '').trim();\n\n      if (txt) {\n        if (result[3].length === 3) {\n          result[3] = result[3] / 10; //[00:01.997] 中匹配到的 997 就会被切成 99\n        }\n\n        this.lines.push({\n          time: result[1] * 60 * 1000 + result[2] * 1000 + (result[3] || 0) * 10,\n          // 转化具体到毫秒的时间，result [3] * 10 可理解为 (result / 100) * 1000\n          txt\n        });\n      }\n    }\n\n    this.lines.sort((a, b) => {\n      return a.time - b.time;\n    }); // 根据时间排序\n  }\n\n}","map":{"version":3,"sources":["/Users/macos/Desktop/react-music-webapp/src/api/lyric-parser.js"],"names":["timeExp","STATE_PAUSE","STATE_PLAYING","Lyric","constructor","lrc","hanlder","noop","speed","lines","state","curLineIndex","startStamp","_initLines","split","i","length","line","result","exec","txt","replace","trim","push","time","sort","a","b"],"mappings":"AAAA,MAAMA,OAAO,GAAG,0CAAhB;AAEA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,aAAa,GAAG,CAAtB;AAGA,eAAe,MAAOC,KAAP,CAAa;AACxBC,EAAAA,WAAW,CAACC,GAAD,EAAiC;AAAA,QAA3BC,OAA2B,uEAAjBC,IAAiB;AAAA,QAAXC,KAAW,uEAAH,CAAG;AACxC,SAAKH,GAAL,GAAWA,GAAX;AACA,SAAKI,KAAL,GAAa,EAAb;AACA,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKI,KAAL,GAAaT,WAAb;AACA,SAAKU,YAAL,GAAoB,CAApB,CALwC,CAKlB;;AACtB,SAAKC,UAAL,GAAkB,CAAlB;AAEH;;AACDC,EAAAA,UAAU,GAAI;AACV,UAAMJ,KAAK,GAAE,KAAKJ,GAAL,CAASS,KAAT,CAAe,IAAf,CAAb;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,KAAK,CAACO,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,YAAME,IAAI,GAAG,KAAKR,KAAL,CAAWM,CAAX,CAAb,CADkC,CAElC;;AACA,UAAIG,MAAM,GAAGlB,OAAO,CAACmB,IAAR,CAAaF,IAAb,CAAb;AACA,UAAG,CAACC,MAAJ,EAAY;AACZ,YAAME,GAAG,GAAGH,IAAI,CAACI,OAAL,CAAarB,OAAb,EAAsB,EAAtB,EAA0BsB,IAA1B,EAAZ;;AACA,UAAIF,GAAJ,EAAS;AACL,YAAIF,MAAM,CAAC,CAAD,CAAN,CAAUF,MAAV,KAAqB,CAAzB,EAA4B;AAC1BE,UAAAA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,GAAU,EAAtB,CAD0B,CACD;AAC1B;;AACD,aAAKT,KAAL,CAAWc,IAAX,CAAiB;AACfC,UAAAA,IAAI,EAAEN,MAAM,CAAC,CAAD,CAAN,GAAY,EAAZ,GAAiB,IAAjB,GAAwBA,MAAM,CAAC,CAAD,CAAN,GAAY,IAApC,GAA2C,CAACA,MAAM,CAAC,CAAD,CAAN,IAAa,CAAd,IAAmB,EADrD;AACwD;AACvEE,UAAAA;AAFe,SAAjB;AAIH;AACJ;;AACD,SAAKX,KAAL,CAAWgB,IAAX,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACvB,aAAOD,CAAC,CAACF,IAAF,GAASG,CAAC,CAACH,IAAlB;AACH,KAFD,EAlBU,CAoBP;AACN;;AA/BuB","sourcesContent":["const timeExp = /\\[(\\d{2,}):(\\d{2})(?:[\\.\\:](\\d{2,3}))?]/g\n\nconst STATE_PAUSE = 0\nconst STATE_PLAYING = 1\n\n\nexport default class  Lyric {\n    constructor(lrc, hanlder = noop, speed = 1) {\n        this.lrc = lrc;\n        this.lines = [];\n        this.hanlder = hanlder;\n        this.state = STATE_PAUSE;\n        this.curLineIndex = 0;// 当前播放歌词所在的行数\n        this.startStamp = 0;\n\n    }   \n    _initLines () {\n        const lines =this.lrc.split('\\n');\n        for(let i = 0; i < lines.length; i++) {\n            const line = this.lines[i];\n            //获得对应时间戳的文本\n            let result = timeExp.exec(line);\n            if(!result) continue;\n            const txt = line.replace(timeExp, '').trim();\n            if (txt) {\n                if (result[3].length === 3) {\n                  result[3] = result[3]/10;//[00:01.997] 中匹配到的 997 就会被切成 99\n                }\n                this.lines.push ({\n                  time: result[1] * 60 * 1000 + result[2] * 1000 + (result[3] || 0) * 10,// 转化具体到毫秒的时间，result [3] * 10 可理解为 (result / 100) * 1000\n                  txt\n                });\n            }\n        }\n        this.lines.sort ((a, b) => {\n            return a.time - b.time;\n        });// 根据时间排序\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}