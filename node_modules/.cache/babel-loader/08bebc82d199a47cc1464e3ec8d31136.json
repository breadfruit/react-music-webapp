{"ast":null,"code":"import axios from 'axios';\nimport { axiosInstance, axiosOtherInstance } from \"./config\";\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source(); //获取轮播图\n\nexport const getBannerRequest = () => {\n  return axiosInstance.get('/getDigitalAlbumLists');\n}; // export const  getBannerRequest = () => {\n//   return axiosInstance.get('/banner', {\n//     cancelToken: source.token\n//   }).catch(function(thrown) {\n//       if(axios.isCancel(thrown)) {\n//           console.log('Request canceled', thrown.message)\n//       } else {\n//           // handle error\n//       }\n//   })\n// }\n//获取推荐歌单\n\nexport const getRecommendListRequest = () => {\n  return axiosInstance.get('/getRecommend');\n}; //实现取消发送\n// export const getRecommendListRequest = () => {\n//     return axiosInstance.get('/personalized', {\n//       cancelToken: source.token\n//     }).catch(function(thrown) {\n//         if(axios.isCancel(thrown)) {\n//             console.log('Request canceled', thrown.message)\n//         } else {\n//             // handle error\n//         }\n//     })\n// }\n// source.cancel('取消上次请求')\n//获取热门歌手\n//可选参数 : limit: 取出数量 , 默认为 50\n//offset: 偏移数量 , 用于分页 , 如 :( 页数 -1)*50, 其中 50 为 limit 的值 , 默认 \n// export const getHotSingerListRequest = (count) => {\n//   return axiosInstance.get(`/top/artists?offset=${count}`);\n// }\n////获取热门歌手\n\nexport const getHotSingerListRequest = () => {\n  return axiosInstance.get('/getSingerList');\n}; //歌手分类列表\n//localhost:4000/artist/list?type=1&area=7&initial=b\n//type 取值: -1:全部 1:男歌手 2:女歌手 3:乐队\n//area 取值: -1:全部 7华语 96欧美 8:日本 0:其他\n//initial取值: 名字首字母\n//limit   默认30\n//offset : 偏移数量 如 : 如 :( 页数 -1)*30, 其中 30 为 limit 的值 \n// export const getSingerListRequest= (area, initial, offset) => {\n//   return axiosInstance.get(`/artist/list?area=${area.toLowerCase()}&initial=${initial}&offset=${offset}`);\n// }\n//area  地区\n//genre 类型\n//index 歌手首字母\n//sex 歌手性别\n\nexport const getSingerListRequest = (area = -100, genre = -100, index = -100, sex = -100) => {\n  return axiosInstance.get(`/getSingerList?area=${area}&sex=${genre}&index=${index}&genre=${sex}`);\n}; //获取排行榜\n\nexport const getRankListRequest = () => {\n  return axiosInstance.get(`/toplist/detail`);\n}; //获取歌单详情\n// 必选参数 : id : 歌单 id\n//可选参数 : s : 歌单最近的 s 个收藏者,默认为8\n\nexport const getAlbumDetailRequest = id => {\n  return axiosInstance.get(`/getSongListDetail?disstid=${id}`);\n}; //获取单个歌曲播放链接\n\nexport const getOneMusicPlayerRequest = mid => {\n  //例子getMusicPlay/songmid=001wPuVc4ZiMhj\n  return axiosInstance.get(`/getMusicPlay?songmid=${mid}`);\n}; //获取多个歌曲播放链接\n\nexport const getMoreMusicPlayerRequest = sonListStr => {\n  //  return axiosInstance.get(`/getMusicPlay/songmid=${sonListStr}&resType=all`)\n  return axiosInstance.get('/getMusicPlay?songmid=' + sonListStr + '&resType=all');\n}; //获取歌曲专辑图片\n\nexport const getImageUrlRequest = id => {\n  return axiosInstance.get(`/getImageUrl?id=${id}`);\n}; //获取歌手详情\n\nexport const getSingerInfoRequest = id => {\n  return axiosInstance.get(`/artists?id=${id}`);\n}; //顶部的高度\n\nexport const HEADER_HEIGHT = 45; //播放器开发\n//获取歌曲歌词\n\nexport const getLyricRequest = id => {\n  return axiosInstance.get(`/lyric?id=${id}`);\n};\nexport const getSongDetailRequest = id => {\n  return axiosInstance.get(`/song/detail?ids=${id}`);\n};\nexport const getHotKeyWordsRequest = () => {\n  return axiosInstance.get(`/search/hot`);\n};\nexport const getSuggestListRequest = query => {\n  return axiosInstance.get(`/search/suggest?keywords = ${query}`);\n};\nexport const getResultSongsListRequest = query => {\n  return axiosInstance.get(`/search?keywords=${query}`);\n}; //手机号码登录\n\nexport const getLoginByPhoneRequest = query => {\n  return axiosInstance.post(`/login/cellphone`);\n}; //邮箱密码登录\n\nexport const getLoginByEmailRequest = query => {\n  return axiosInstance.post();\n}; //二维码扫码登录\n\nexport const getLoginByQRRequest = async () => {\n  getLoginStatusRequest();\n  const res = await axiosOtherInstance.post(`/login/qr/key?timerstamp=${Date.now()}`);\n  const key = res.data.data.unikey;\n  const res2 = await axiosOtherInstance.post(`/login/qr/create?key=${key}&qrimg=true&timerstamp=${Date.now()}`);\n  const qrimg = res2.data.data.qrimg;\n  var timer; //浏览器进行长轮询服务器端是否登录\n\n  timer = setInterval(async () => {\n    const statusRes = await checkStatusRequest(key);\n\n    if (statusRes.code === 800) {\n      // alert('二维码已过期,请重新获取')\n      console.log('二维码已过期,请重新获取');\n      clearInterval(timer);\n    }\n\n    if (statusRes.code === 803) {\n      // 这一步会返回cookie\n      clearInterval(timer); // alert('授权登录成功')\n\n      console.log('授权登录成功'); //将cookie存起来下次发送的时候进行携带\n\n      const MUSIC_U = statusRes.cookies;\n      await getLoginStatusRequest(MUSIC_U);\n    }\n  }, 3000);\n  return qrimg;\n}; //检测登录状态\n\nexport const checkStatusRequest = async key => {\n  const res = await axiosOtherInstance.post(`/login/qr/check?key=${key}&timerstamp=${Date.now()}`);\n  return res.data;\n}; //获得登录状态\n\nexport const getLoginStatusRequest = async music_u => {\n  const res = await axiosOtherInstance.post(`/login/status?timerstamp=${Date.now()}`);\n  console.log(JSON.stringify(res.data, null, 2));\n  return res.data;\n}; //注册\n\nexport const getResigterRequest = () => {};","map":{"version":3,"sources":["/Users/macos/Desktop/react-music-webapp/src/api/request.js"],"names":["axios","axiosInstance","axiosOtherInstance","CancelToken","source","getBannerRequest","get","getRecommendListRequest","getHotSingerListRequest","getSingerListRequest","area","genre","index","sex","getRankListRequest","getAlbumDetailRequest","id","getOneMusicPlayerRequest","mid","getMoreMusicPlayerRequest","sonListStr","getImageUrlRequest","getSingerInfoRequest","HEADER_HEIGHT","getLyricRequest","getSongDetailRequest","getHotKeyWordsRequest","getSuggestListRequest","query","getResultSongsListRequest","getLoginByPhoneRequest","post","getLoginByEmailRequest","getLoginByQRRequest","getLoginStatusRequest","res","Date","now","key","data","unikey","res2","qrimg","timer","setInterval","statusRes","checkStatusRequest","code","console","log","clearInterval","MUSIC_U","cookies","music_u","JSON","stringify","getResigterRequest"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { axiosInstance, axiosOtherInstance } from \"./config\";\nconst CancelToken = axios.CancelToken \nconst source = CancelToken.source()\n\n//获取轮播图\nexport const getBannerRequest = () => {\n  return axiosInstance.get ('/getDigitalAlbumLists');\n}\n\n\n// export const  getBannerRequest = () => {\n//   return axiosInstance.get('/banner', {\n//     cancelToken: source.token\n//   }).catch(function(thrown) {\n//       if(axios.isCancel(thrown)) {\n//           console.log('Request canceled', thrown.message)\n//       } else {\n//           // handle error\n//       }\n//   })\n// }\n\n\n//获取推荐歌单\nexport const getRecommendListRequest = () => {\n  return axiosInstance.get ('/getRecommend');\n}\n\n//实现取消发送\n// export const getRecommendListRequest = () => {\n//     return axiosInstance.get('/personalized', {\n//       cancelToken: source.token\n//     }).catch(function(thrown) {\n//         if(axios.isCancel(thrown)) {\n//             console.log('Request canceled', thrown.message)\n//         } else {\n//             // handle error\n//         }\n//     })\n// }\n\n// source.cancel('取消上次请求')\n//获取热门歌手\n//可选参数 : limit: 取出数量 , 默认为 50\n//offset: 偏移数量 , 用于分页 , 如 :( 页数 -1)*50, 其中 50 为 limit 的值 , 默认 \n// export const getHotSingerListRequest = (count) => {\n//   return axiosInstance.get(`/top/artists?offset=${count}`);\n// }\n////获取热门歌手\nexport const getHotSingerListRequest = () => {\n  return axiosInstance.get('/getSingerList')\n}\n//歌手分类列表\n//localhost:4000/artist/list?type=1&area=7&initial=b\n//type 取值: -1:全部 1:男歌手 2:女歌手 3:乐队\n//area 取值: -1:全部 7华语 96欧美 8:日本 0:其他\n//initial取值: 名字首字母\n//limit   默认30\n//offset : 偏移数量 如 : 如 :( 页数 -1)*30, 其中 30 为 limit 的值 \n// export const getSingerListRequest= (area, initial, offset) => {\n//   return axiosInstance.get(`/artist/list?area=${area.toLowerCase()}&initial=${initial}&offset=${offset}`);\n// }\n\n//area  地区\n//genre 类型\n//index 歌手首字母\n//sex 歌手性别\nexport const getSingerListRequest = (area =-100, genre=-100, index=-100, sex=-100) => {\n  return axiosInstance.get(`/getSingerList?area=${area}&sex=${genre}&index=${index}&genre=${sex}`)\n}\n//获取排行榜\nexport const getRankListRequest = () => {\n  return axiosInstance.get(`/toplist/detail`);\n};\n\n\n//获取歌单详情\n// 必选参数 : id : 歌单 id\n//可选参数 : s : 歌单最近的 s 个收藏者,默认为8\nexport const getAlbumDetailRequest = id => {\n  return axiosInstance.get(`/getSongListDetail?disstid=${id}`);\n};\n\n//获取单个歌曲播放链接\nexport const getOneMusicPlayerRequest = (mid) => {\n  //例子getMusicPlay/songmid=001wPuVc4ZiMhj\n  return axiosInstance.get(`/getMusicPlay?songmid=${mid}`)\n}\n//获取多个歌曲播放链接\nexport const getMoreMusicPlayerRequest = (sonListStr) => {\n  //  return axiosInstance.get(`/getMusicPlay/songmid=${sonListStr}&resType=all`)\n  return axiosInstance.get('/getMusicPlay?songmid='+ sonListStr + '&resType=all')\n} \n\n//获取歌曲专辑图片\nexport const getImageUrlRequest = (id) => {\n  return axiosInstance.get(`/getImageUrl?id=${id}`)\n}\n//获取歌手详情\nexport const getSingerInfoRequest = id => {\n  return axiosInstance.get(`/artists?id=${id}`);\n};\n\n//顶部的高度\nexport const HEADER_HEIGHT = 45;\n\n//播放器开发\n\n\n\n//获取歌曲歌词\nexport const getLyricRequest = id => {\n  return axiosInstance.get (`/lyric?id=${id}`);\n};\n\n\nexport const getSongDetailRequest = id => {\n    return axiosInstance.get(`/song/detail?ids=${id}`);\n};\n\n\nexport const getHotKeyWordsRequest = () => {\n    return axiosInstance.get(`/search/hot`)\n}\n\n\nexport const getSuggestListRequest  = (query) => {\n    return axiosInstance.get(`/search/suggest?keywords = ${query}`)\n}\n\nexport const getResultSongsListRequest = (query) => {\n    return axiosInstance.get(`/search?keywords=${query}`)\n}\n//手机号码登录\nexport const getLoginByPhoneRequest = (query) => {\n  return axiosInstance.post(`/login/cellphone`)\n}\n//邮箱密码登录\nexport const getLoginByEmailRequest = (query) => {\n  return axiosInstance.post()\n}\n\n//二维码扫码登录\nexport  const getLoginByQRRequest =async () => {\n  getLoginStatusRequest()\n  const res = await axiosOtherInstance.post(`/login/qr/key?timerstamp=${Date.now()}`)\n  const key = res.data.data.unikey;\n  const res2 = await axiosOtherInstance.post(`/login/qr/create?key=${key}&qrimg=true&timerstamp=${Date.now()}`)\n  const qrimg = res2.data.data.qrimg;\n  var timer;\n  //浏览器进行长轮询服务器端是否登录\n  timer = setInterval(async () => {\n    const statusRes = await checkStatusRequest(key)\n    if (statusRes.code === 800) {\n      // alert('二维码已过期,请重新获取')\n      console.log('二维码已过期,请重新获取')\n      clearInterval(timer)\n    }\n    if (statusRes.code === 803) {\n      // 这一步会返回cookie\n      clearInterval(timer)\n      // alert('授权登录成功')\n      console.log('授权登录成功');\n      //将cookie存起来下次发送的时候进行携带\n      const MUSIC_U = statusRes.cookies;\n\n      await getLoginStatusRequest(MUSIC_U);\n      \n    }\n  }, 3000)\n  return qrimg\n} \n//检测登录状态\nexport const checkStatusRequest = async (key) => {\n  const res = await axiosOtherInstance.post(`/login/qr/check?key=${key}&timerstamp=${Date.now()}`)\n  return res.data\n}\n\n//获得登录状态\nexport const  getLoginStatusRequest = async (music_u) => {\n  const res =  await axiosOtherInstance.post(`/login/status?timerstamp=${Date.now()}`);\n  console.log(JSON.stringify(res.data, null, 2))\n  return res.data\n}\n//注册\nexport const getResigterRequest = () => {\n\n}\n"]},"metadata":{},"sourceType":"module"}