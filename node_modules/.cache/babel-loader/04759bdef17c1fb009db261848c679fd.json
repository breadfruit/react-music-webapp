{"ast":null,"code":"import { axiosOtherInstance } from \"./config\"; // const CancelToken = axios.CancelToken \n// const source = CancelToken.source()\n//获取轮播图\n\nexport const getBannerRequest = () => {\n  return axiosOtherInstance.get(\"/banner\");\n}; // export const  getBannerRequest = () => {\n//   return axiosInstance.get('/banner', {\n//     cancelToken: source.token\n//   }).catch(function(thrown) {\n//       if(axios.isCancel(thrown)) {\n//           console.log('Request canceled', thrown.message)\n//       } else {\n//           // handle error\n//       }\n//   })\n// }\n//获取推荐歌单\n\nexport const getRecommendListRequest = () => {\n  return axiosOtherInstance.get(\"/personalized\");\n}; // export const getRecommendListRequest = () => {\n//   return  axiosInstance.get ('/getRecommend');\n// }\n//实现取消发送\n// export const getRecommendListRequest = () => {\n//     return axiosInstance.get('/personalized', {\n//       cancelToken: source.token\n//     }).catch(function(thrown) {\n//         if(axios.isCancel(thrown)) {\n//             console.log('Request canceled', thrown.message)\n//         } else {\n//             // handle error\n//         }\n//     })\n// }\n// source.cancel('取消上次请求')\n//获取热门歌手\n//可选参数 : limit: 取出数量 , 默认为 50\n//offset: 偏移数量 , 用于分页 , 如 :( 页数 -1)*50, 其中 50 为 limit 的值 , 默认 \n// export const getHotSingerListRequest = (count) => {\n//   return axiosInstance.get(`/top/artists?offset=${count}`);\n// }\n////获取热门歌手\n\nexport const getHotSingerListRequest = count => {\n  return axiosOtherInstance.get(`/top/artists?offset=${count}`);\n}; // export const getHotSingerListRequest = () => {\n//   return axiosInstance.get('/getSingerList')\n// }\n//歌手分类列表\n//localhost:4000/artist/list?type=1&area=7&initial=b\n//type 取值: -1:全部 1:男歌手 2:女歌手 3:乐队\n//area 取值: -1:全部 7华语 96欧美 8:日本 0:其他\n//initial取值: 名字首字母\n//limit   默认30\n//offset : 偏移数量 如 : 如 :( 页数 -1)*30, 其中 30 为 limit 的值 \n\nexport const getSingerListRequest = (area, initial, offset) => {\n  return axiosOtherInstance.get(`/artist/list?area=${area.toLowerCase()}&initial=${initial}&offset=${offset}`);\n}; //area  地区\n//genre 类型\n//index 歌手首字母\n//sex 歌手性别\n// export const getSingerListRequest = (area =-100, genre=-100, index=-100, sex=-100) => {\n//   return axiosOtherInstance.get(`/getSingerList?area=${area}&sex=${genre}&index=${index}&genre=${sex}`)\n// }\n//获取排行榜\n\nexport const getRankListRequest = () => {\n  return axiosOtherInstance.get(`/toplist/detail`);\n}; //获取歌单详情\n// 必选参数 : id : 歌单 id\n//可选参数 : s : 歌单最近的 s 个收藏者,默认为8\n\nexport const getAlbumDetailRequest = id => {\n  return axiosOtherInstance.get(`/playlist/detail?id=${id}`);\n}; // //获取单个歌曲播放链接\n// export const getOneMusicPlayerRequest = (mid) => {\n//   //例子getMusicPlay/songmid=001wPuVc4ZiMhj\n//   return axiosInstance.get(`/getMusicPlay?songmid=${mid}`)\n// }\n// //获取多个歌曲播放链接\n// export const getMoreMusicPlayerRequest = (sonListStr) => {\n//   //  return axiosInstance.get(`/getMusicPlay/songmid=${sonListStr}&resType=all`)\n//   return axiosInstance.get('/getMusicPlay?songmid='+ sonListStr + '&resType=all')\n// } \n// //获取歌曲专辑图片\n// export const getImageUrlRequest = (id) => {\n//   return axiosOtherInstance.get(`/getImageUrl?id=${id}`)\n// }\n//获取歌手详情\n\nexport const getSingerInfoRequest = id => {\n  return axiosOtherInstance.get(`/artists?id=${id}`);\n}; //顶部的高度\n\nexport const HEADER_HEIGHT = 45; //获取歌曲歌词\n\nexport const getLyricRequest = id => {\n  return axiosOtherInstance.get(`/lyric?id=${id}`);\n};\nexport const getSongDetailRequest = id => {\n  return axiosOtherInstance.get(`/song/detail?ids=${id}`);\n};\nexport const getHotKeyWordsRequest = () => {\n  return axiosOtherInstance.get(`/search/hot`);\n};\nexport const getSuggestListRequest = query => {\n  return axiosOtherInstance.get(`/search/suggest?keywords = ${query}`);\n};\nexport const getResultSongsListRequest = query => {\n  return axiosOtherInstance.get(`/search?keywords=${query}`);\n}; //邮箱登录\n\nexport const getLoginByEmailRequest = async (email, password) => {\n  const res = await axiosOtherInstance.post(`/login?email=${email}&password=${password}`);\n  console.log('邮箱登录----', res);\n  const userInfo = res.data.account; //进行用户信息存入自己的数据库\n  //将cookie登录凭证进行储存\n}; //手机登录\n\nexport const getLoginByPhoneRequest = async (phone, password) => {\n  const res = await axiosOtherInstance.post(`/login/cellphone?phone=${phone}&password=${password}/`);\n  console.log('手机登录--', res);\n}; //二维码扫码登录\n\nexport const getLoginByQRRequest = async () => {\n  await getLoginStatusRequest();\n  const res = await axiosOtherInstance.post(`/login/qr/key?timerstamp=${Date.now()}`);\n  const key = res.data.unikey;\n  const res2 = await axiosOtherInstance.post(`/login/qr/create?key=${key}&qrimg=true&timerstamp=${Date.now()}`);\n  const qrimg = res2.data.qrimg;\n  var timer; //浏览器进行长轮询服务器端是否登录\n\n  timer = setInterval(async () => {\n    const statusRes = await checkStatusRequest(key);\n\n    if (statusRes !== undefined) {\n      if (statusRes.code === 800) {\n        // alert('二维码已过期,请重新获取')\n        console.log('二维码已过期,请重新获取');\n        clearInterval(timer);\n      }\n\n      if (statusRes.code === 803) {\n        // 这一步会返回cookie\n        clearInterval(timer); // alert('授权登录成功')\n\n        console.log('授权登录成功'); //将cookie存起来下次发送的时候进行携带\n\n        console.log(statusRes);\n        const {\n          cookie\n        } = statusRes;\n        console.log('cookies----', cookie);\n        await getLoginStatusRequest(); // const userInfo = await getLoginStatusRequest().data.profile;\n        // console.log(userInfo)\n        // //进行用户资料数据库插入操作\n        // const {nickname, userId, userName, gender, phone, password, avatarUrl, backgroundUrl, accountType,  birthday, signature} = userInfo;\n        // if(checkHaveUser()){\n        // }else {\n        // }\n      }\n    }\n  }, 3000);\n  return qrimg;\n}; //检测登录状态\n\nexport const checkStatusRequest = async key => {\n  const res = await axiosOtherInstance.post(`/login/qr/check?key=${key}&timerstamp=${Date.now()}`);\n  return res.data;\n};\nexport const checkHaveUser = () => {}; //获得登录状态\n\nexport const getLoginStatusRequest = async () => {\n  const res = await axiosOtherInstance.post(`/login/status?timerstamp=${Date.now}`);\n  return res.data;\n}; //注册\n\nexport const getResigterRequest = () => {}; //获取","map":{"version":3,"sources":["/Users/macos/Desktop/react-music-webapp/src/api/request.js"],"names":["axiosOtherInstance","getBannerRequest","get","getRecommendListRequest","getHotSingerListRequest","count","getSingerListRequest","area","initial","offset","toLowerCase","getRankListRequest","getAlbumDetailRequest","id","getSingerInfoRequest","HEADER_HEIGHT","getLyricRequest","getSongDetailRequest","getHotKeyWordsRequest","getSuggestListRequest","query","getResultSongsListRequest","getLoginByEmailRequest","email","password","res","post","console","log","userInfo","data","account","getLoginByPhoneRequest","phone","getLoginByQRRequest","getLoginStatusRequest","Date","now","key","unikey","res2","qrimg","timer","setInterval","statusRes","checkStatusRequest","undefined","code","clearInterval","cookie","checkHaveUser","getResigterRequest"],"mappings":"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","sourcesContent":["\nimport { axiosOtherInstance } from \"./config\";\n// const CancelToken = axios.CancelToken \n// const source = CancelToken.source()\n\n//获取轮播图\nexport const getBannerRequest = () => {\n  return axiosOtherInstance.get(\"/banner\");\n};\n\n// export const  getBannerRequest = () => {\n//   return axiosInstance.get('/banner', {\n//     cancelToken: source.token\n//   }).catch(function(thrown) {\n//       if(axios.isCancel(thrown)) {\n//           console.log('Request canceled', thrown.message)\n//       } else {\n//           // handle error\n//       }\n//   })\n// }\n\n\n//获取推荐歌单\nexport const getRecommendListRequest = () => {\n  return axiosOtherInstance.get(\"/personalized\");\n};\n// export const getRecommendListRequest = () => {\n//   return  axiosInstance.get ('/getRecommend');\n// }\n\n//实现取消发送\n// export const getRecommendListRequest = () => {\n//     return axiosInstance.get('/personalized', {\n//       cancelToken: source.token\n//     }).catch(function(thrown) {\n//         if(axios.isCancel(thrown)) {\n//             console.log('Request canceled', thrown.message)\n//         } else {\n//             // handle error\n//         }\n//     })\n// }\n\n// source.cancel('取消上次请求')\n//获取热门歌手\n//可选参数 : limit: 取出数量 , 默认为 50\n//offset: 偏移数量 , 用于分页 , 如 :( 页数 -1)*50, 其中 50 为 limit 的值 , 默认 \n// export const getHotSingerListRequest = (count) => {\n//   return axiosInstance.get(`/top/artists?offset=${count}`);\n// }\n////获取热门歌手\nexport const getHotSingerListRequest = count => {\n  return axiosOtherInstance.get(`/top/artists?offset=${count}`);\n};\n// export const getHotSingerListRequest = () => {\n//   return axiosInstance.get('/getSingerList')\n// }\n//歌手分类列表\n//localhost:4000/artist/list?type=1&area=7&initial=b\n//type 取值: -1:全部 1:男歌手 2:女歌手 3:乐队\n//area 取值: -1:全部 7华语 96欧美 8:日本 0:其他\n//initial取值: 名字首字母\n//limit   默认30\n//offset : 偏移数量 如 : 如 :( 页数 -1)*30, 其中 30 为 limit 的值 \nexport const getSingerListRequest = (area, initial, offset) => {\n  return axiosOtherInstance.get(`/artist/list?area=${area.toLowerCase()}&initial=${initial}&offset=${offset}`);\n}\n\n//area  地区\n//genre 类型\n//index 歌手首字母\n//sex 歌手性别\n// export const getSingerListRequest = (area =-100, genre=-100, index=-100, sex=-100) => {\n//   return axiosOtherInstance.get(`/getSingerList?area=${area}&sex=${genre}&index=${index}&genre=${sex}`)\n// }\n//获取排行榜\nexport const getRankListRequest = () => {\n  return axiosOtherInstance.get(`/toplist/detail`);\n};\n\n\n//获取歌单详情\n// 必选参数 : id : 歌单 id\n//可选参数 : s : 歌单最近的 s 个收藏者,默认为8\nexport const getAlbumDetailRequest = id => {\n  return axiosOtherInstance.get(`/playlist/detail?id=${id}`);\n};\n\n\n// //获取单个歌曲播放链接\n// export const getOneMusicPlayerRequest = (mid) => {\n//   //例子getMusicPlay/songmid=001wPuVc4ZiMhj\n//   return axiosInstance.get(`/getMusicPlay?songmid=${mid}`)\n// }\n// //获取多个歌曲播放链接\n// export const getMoreMusicPlayerRequest = (sonListStr) => {\n//   //  return axiosInstance.get(`/getMusicPlay/songmid=${sonListStr}&resType=all`)\n//   return axiosInstance.get('/getMusicPlay?songmid='+ sonListStr + '&resType=all')\n// } \n\n// //获取歌曲专辑图片\n// export const getImageUrlRequest = (id) => {\n//   return axiosOtherInstance.get(`/getImageUrl?id=${id}`)\n// }\n//获取歌手详情\nexport const getSingerInfoRequest = id => {\n  return axiosOtherInstance.get(`/artists?id=${id}`);\n};\n\n//顶部的高度\nexport const HEADER_HEIGHT = 45;\n\n\n\n\n\n//获取歌曲歌词\nexport const getLyricRequest = id => {\n  return axiosOtherInstance.get(`/lyric?id=${id}`);\n};\n\n\nexport const getSongDetailRequest = id => {\n  return axiosOtherInstance.get(`/song/detail?ids=${id}`);\n};\n\n\nexport const getHotKeyWordsRequest = () => {\n  return axiosOtherInstance.get(`/search/hot`)\n}\n\n\nexport const getSuggestListRequest = (query) => {\n  return axiosOtherInstance.get(`/search/suggest?keywords = ${query}`)\n}\n\nexport const getResultSongsListRequest = (query) => {\n  return axiosOtherInstance.get(`/search?keywords=${query}`)\n}\n\n//邮箱登录\nexport const getLoginByEmailRequest = async (email, password) => {\n  const res = await axiosOtherInstance.post(`/login?email=${email}&password=${password}`);\n  console.log('邮箱登录----', res)\n  const userInfo = res.data.account;\n  //进行用户信息存入自己的数据库\n  //将cookie登录凭证进行储存\n}\n//手机登录\nexport const getLoginByPhoneRequest = async (phone, password) => {\n  const res = await axiosOtherInstance.post(`/login/cellphone?phone=${phone}&password=${password}/`);\n  console.log('手机登录--', res)\n}\n\n//二维码扫码登录\nexport const getLoginByQRRequest = async () => {\n  await getLoginStatusRequest()\n\n  const res = await axiosOtherInstance.post(`/login/qr/key?timerstamp=${Date.now()}`);\n  const key = res.data.unikey;\n  const res2 = await axiosOtherInstance.post(`/login/qr/create?key=${key}&qrimg=true&timerstamp=${Date.now()}`)\n  const qrimg = res2.data.qrimg;\n  var timer;\n  //浏览器进行长轮询服务器端是否登录\n  timer = setInterval(async () => {\n    const statusRes = await checkStatusRequest(key);\n\n    if (statusRes !== undefined) {\n      if (statusRes.code === 800) {\n        // alert('二维码已过期,请重新获取')\n        console.log('二维码已过期,请重新获取')\n        clearInterval(timer)\n      }\n      if (statusRes.code === 803) {\n        // 这一步会返回cookie\n        clearInterval(timer)\n        // alert('授权登录成功')\n        console.log('授权登录成功');\n        //将cookie存起来下次发送的时候进行携带\n        console.log(statusRes)\n        const { cookie } = statusRes;\n        console.log('cookies----', cookie)\n\n\n        await getLoginStatusRequest()\n        // const userInfo = await getLoginStatusRequest().data.profile;\n        // console.log(userInfo)\n        // //进行用户资料数据库插入操作\n        // const {nickname, userId, userName, gender, phone, password, avatarUrl, backgroundUrl, accountType,  birthday, signature} = userInfo;\n\n        // if(checkHaveUser()){\n\n        // }else {\n\n        // }\n\n      }\n    }\n  }, 3000)\n\n  return qrimg\n}\n//检测登录状态\nexport const checkStatusRequest = async (key) => {\n  const res = await axiosOtherInstance.post(`/login/qr/check?key=${key}&timerstamp=${Date.now()}`)\n  return res.data\n}\nexport const checkHaveUser = () => {\n\n}\n\n//获得登录状态\nexport const getLoginStatusRequest = async () => {\n  const res = await axiosOtherInstance.post(`/login/status?timerstamp=${Date.now}`);\n  return res.data\n}\n\n//注册\nexport const getResigterRequest = () => {\n\n}\n\n\n//获取"]},"metadata":{},"sourceType":"module"}