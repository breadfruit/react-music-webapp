{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Desktop/react-music-webapp/src/application/Player/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { changePlayingState, changeShowPlayList, changeCurrentIndex, changeCurrentSong, changePlayList, changePlayMode, changeFullScreen } from \"./store/actionCreators\";\nimport MiniPlayer from './miniPlayer';\nimport NormalPlayer from './normalPlayer';\nimport { getSongUrl, isEmptyObject, shuffle, findIndex } from \"../../api/utils\";\nimport { playMode } from '../../api/config';\nimport Toast from \"./../../baseUI/toast/index\";\nimport PlayList from './play-list/index';\nimport { getLyricRequest, getOneMusicPlayerRequest } from \"../../api/request\";\nimport Lyric from './../../api/lyric-parser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Player(props) {\n  _s();\n\n  //目前播放时间\n  const [currentTime, setCurrentTime] = useState(0); //歌曲总时长\n\n  const [duration, setDuration] = useState(0); //歌曲播放进度\n\n  let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\n  const [currentPlayingLyric, setPlayingLyric] = useState(\"\");\n  const [preSong, setPreSong] = useState({});\n  const [modeText, setModeText] = useState(\"\");\n  const [songReady, setSongReady] = useState(true);\n  const audioRef = useRef();\n  const toastRef = useRef();\n  const currentLyric = useRef();\n  const currentLineNum = useRef(0);\n  const {\n    playing,\n    currentSong: immutableCurrentSong,\n    currentIndex,\n    playList: immutablePlayList,\n    mode,\n    //播放模式\n    sequencePlayList: immutableSequencePlayList,\n    //顺序列表\n    fullScreen\n  } = props;\n  const {\n    togglePlayingDispatch,\n    togglePlayListDispatch,\n    changeCurrentIndexDispatch,\n    changeCurrentDispatch,\n    changePlayListDispatch,\n    //改变playList\n    changeModeDispatch,\n    //改变mode\n    toggleFullScreenDispatch\n  } = props;\n  const playList = immutablePlayList.toJS();\n  const sequencePlayList = immutableSequencePlayList.toJS();\n  const currentSong = immutableCurrentSong.toJS();\n  const [currentMusicPlayer, setCurrentMusicPlayer] = useState('');\n  useEffect(() => {\n    if (!playList.length || currentIndex === -1 || !playList[currentIndex] || playList[currentIndex].id === preSong.id || !songReady) return;\n    let current = playList[currentIndex];\n    setPreSong(current);\n    setSongReady(false);\n    changeCurrentDispatch(current); //赋值currentSong\n\n    audioRef.current.src = getSongUrl(current.id);\n    setTimeout(() => {\n      audioRef.current.play().then(() => {\n        setSongReady(true);\n      });\n    });\n    togglePlayingDispatch(true); //播放状态\n\n    getLyric(current.id);\n    setCurrentTime(0); //从头开始播放\n\n    setDuration(current.dt / 1000 | 0); //时长\n    // eslint-disable-next-line\n  }, [playList, currentIndex]);\n  useEffect(() => {\n    playing ? audioRef.current.play() : audioRef.current.pause();\n  }, [playing]);\n  useEffect(() => {\n    //先获取歌曲播放链接\n    getOneMusicPlayerRequest(currentIndex.mid).then(res => {\n      console.log('currentIndex', currentIndex);\n      console.log('res----', res); // let data =  res.response.data.playUrl;\n      // if(!data.error) {\n      //   data = data.url;\n      // }else {\n      //   data = data.error\n      // }\n      // setCurrentMusicPlayer(data)\n    });\n  });\n\n  const handleLyric = ({\n    lineNum,\n    txt\n  }) => {\n    if (!currentLyric.current) return;\n    currentLineNum.current = lineNum;\n    setPlayingLyric(txt);\n  };\n\n  const getLyric = id => {\n    let lyric = \"\";\n    getLyricRequest(id).then(data => {\n      console.log('data---', data);\n      lyric = data.lrc.lyric;\n\n      if (!lyric) {\n        currentLyric.current = null;\n        return;\n      }\n\n      currentLyric.current = new Lyric(lyric, handleLyric);\n      currentLyric.current.play();\n      currentLineNum.current = 0;\n      currentLyric.current.seek(0);\n    }).catch(() => {\n      songReady.current = true;\n      audioRef.current.play();\n    });\n  };\n\n  const clickPlaying = (e, state) => {\n    e.stopPropagation();\n    togglePlayingDispatch(state);\n\n    if (currentLyric.current) {\n      currentLyric.current.togglePlay(currentTime * 1000);\n    }\n  };\n\n  const updateTime = e => {\n    setCurrentTime(e.target.currentTime);\n  };\n\n  const onProgressChange = curPercent => {\n    const newTime = curPercent * duration;\n    setCurrentTime(newTime);\n    audioRef.current.currentTime = newTime;\n\n    if (!playing) {\n      togglePlayingDispatch(true);\n    }\n\n    if (currentLyric.current) {\n      currentLyric.current.seek(newTime * 1000);\n    }\n  }; //一首歌循环\n\n\n  const handleLoop = () => {\n    audioRef.current.currentTime = 0;\n    changePlayingState(true);\n    audioRef.current.play();\n  };\n\n  const handlePrev = () => {\n    //播放列表只有一首歌时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n\n    let index = currentIndex - 1;\n    if (index < 0) index = playList.length - 1;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  const changeMode = () => {\n    let newMode = (mode + 1) % 3;\n\n    if (newMode === 0) {\n      //顺序模式\n      changePlayListDispatch(sequencePlayList);\n      let index = findIndex(currentSong, sequencePlayList);\n      changeCurrentIndexDispatch(index);\n      setModeText(\"顺序循环\");\n    } else if (newMode === 1) {\n      //单曲循环\n      changePlayListDispatch(sequencePlayList);\n      setModeText(\"单曲循环\");\n    } else if (newMode === 2) {\n      //随机播放\n      let newList = shuffle(sequencePlayList);\n      let index = findIndex(currentSong, newList);\n      changePlayListDispatch(newList);\n      changeCurrentIndexDispatch(index);\n      setModeText(\"随机播放\");\n    }\n\n    changeModeDispatch(newMode);\n    toastRef.current.show();\n  };\n\n  const handleNext = () => {\n    //播放列表只有一首歌时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n\n    let index = currentIndex + 1;\n    if (index === playList.length) index = 0;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  const handleEnd = () => {\n    if (mode === playMode.loop) {\n      handleLoop();\n    } else {\n      handleNext();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isEmptyObject(currentSong) ? null : /*#__PURE__*/_jsxDEV(MiniPlayer, {\n      song: currentSong,\n      fullScreen: fullScreen,\n      playing: playing,\n      toggleFullScreen: toggleFullScreenDispatch,\n      clickPlaying: clickPlaying,\n      percent: percent,\n      changePlayListDispatch: changePlayListDispatch,\n      togglePlayList: togglePlayListDispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this), isEmptyObject(currentSong) ? null : /*#__PURE__*/_jsxDEV(NormalPlayer, {\n      song: currentSong,\n      fullScreen: fullScreen,\n      playing: playing,\n      mode: mode,\n      currentLyric: currentLyric.current,\n      currentPlayingLyric: currentPlayingLyric,\n      currentLineNum: currentLineNum.current,\n      changeMode: changeMode,\n      duration: duration,\n      currentTime: currentTime,\n      percent: percent,\n      toggleFullScreen: toggleFullScreenDispatch,\n      clickPlaying: clickPlaying,\n      onProgressChange: onProgressChange,\n      handlePrev: handlePrev,\n      handleNext: handleNext,\n      changePlayListDispatch: changePlayListDispatch,\n      togglePlayList: togglePlayListDispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      onTimeUpdate: updateTime,\n      onEnded: handleEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      text: modeText,\n      ref: toastRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n} // 映射Redux全局的state到组件的props上\n\n\n_s(Player, \"U8Sn0pV/Xc25AhjJbAnqSUXvd9w=\");\n\n_c = Player;\n\nconst mapStateToProps = state => ({\n  fullScreen: state.getIn([\"player\", \"fullScreen\"]),\n  playing: state.getIn([\"player\", \"playing\"]),\n  currentSong: state.getIn([\"player\", \"currentSong\"]),\n  showPlayList: state.getIn([\"player\", \"showPlayList\"]),\n  mode: state.getIn([\"player\", \"mode\"]),\n  currentIndex: state.getIn([\"player\", \"currentIndex\"]),\n  playList: state.getIn([\"player\", \"playList\"]),\n  sequencePlayList: state.getIn([\"player\", \"sequencePlayList\"])\n}); // 映射dispatch到props上\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    togglePlayingDispatch(data) {\n      dispatch(changePlayingState(data));\n    },\n\n    toggleFullScreenDispatch(data) {\n      dispatch(changeFullScreen(data));\n    },\n\n    togglePlayListDispatch(data) {\n      dispatch(changeShowPlayList(data));\n    },\n\n    changeCurrentIndexDispatch(index) {\n      dispatch(changeCurrentIndex(index));\n    },\n\n    changeCurrentDispatch(data) {\n      dispatch(changeCurrentSong(data));\n    },\n\n    changeModeDispatch(data) {\n      dispatch(changePlayMode(data));\n    },\n\n    changePlayListDispatch(data) {\n      dispatch(changePlayList(data));\n    }\n\n  };\n}; // 将ui组件包装成容器组件\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/React.memo(Player));\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/macos/Desktop/react-music-webapp/src/application/Player/index.js"],"names":["React","useRef","useState","useEffect","connect","changePlayingState","changeShowPlayList","changeCurrentIndex","changeCurrentSong","changePlayList","changePlayMode","changeFullScreen","MiniPlayer","NormalPlayer","getSongUrl","isEmptyObject","shuffle","findIndex","playMode","Toast","PlayList","getLyricRequest","getOneMusicPlayerRequest","Lyric","Player","props","currentTime","setCurrentTime","duration","setDuration","percent","isNaN","currentPlayingLyric","setPlayingLyric","preSong","setPreSong","modeText","setModeText","songReady","setSongReady","audioRef","toastRef","currentLyric","currentLineNum","playing","currentSong","immutableCurrentSong","currentIndex","playList","immutablePlayList","mode","sequencePlayList","immutableSequencePlayList","fullScreen","togglePlayingDispatch","togglePlayListDispatch","changeCurrentIndexDispatch","changeCurrentDispatch","changePlayListDispatch","changeModeDispatch","toggleFullScreenDispatch","toJS","currentMusicPlayer","setCurrentMusicPlayer","length","id","current","src","setTimeout","play","then","getLyric","dt","pause","mid","res","console","log","handleLyric","lineNum","txt","lyric","data","lrc","seek","catch","clickPlaying","e","state","stopPropagation","togglePlay","updateTime","target","onProgressChange","curPercent","newTime","handleLoop","handlePrev","index","changeMode","newMode","newList","show","handleNext","handleEnd","loop","mapStateToProps","getIn","showPlayList","mapDispatchToProps","dispatch","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,kBADF,EAEEC,kBAFF,EAGEC,kBAHF,EAIEC,iBAJF,EAKEC,cALF,EAMEC,cANF,EAOEC,gBAPF,QAQO,wBARP;AASA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,OAApC,EAA6CC,SAA7C,QAA8D,iBAA9D;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,eAAT,EAA0BC,wBAA1B,QAA0D,mBAA1D;AACA,OAAOC,KAAP,MAAkB,0BAAlB;;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAAA;;AACrB;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCzB,QAAQ,CAAC,CAAD,CAA9C,CAFqB,CAGrB;;AACA,QAAM,CAAC0B,QAAD,EAAWC,WAAX,IAA0B3B,QAAQ,CAAC,CAAD,CAAxC,CAJqB,CAKrB;;AACA,MAAI4B,OAAO,GAAGC,KAAK,CAACL,WAAW,GAAGE,QAAf,CAAL,GAAgC,CAAhC,GAAoCF,WAAW,GAAGE,QAAhE;AACA,QAAM,CAACI,mBAAD,EAAsBC,eAAtB,IAAyC/B,QAAQ,CAAC,EAAD,CAAvD;AACA,QAAM,CAACgC,OAAD,EAAUC,UAAV,IAAwBjC,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACkC,QAAD,EAAWC,WAAX,IAA0BnC,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACoC,SAAD,EAAYC,YAAZ,IAA4BrC,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAMsC,QAAQ,GAAGvC,MAAM,EAAvB;AACA,QAAMwC,QAAQ,GAAGxC,MAAM,EAAvB;AACA,QAAMyC,YAAY,GAAGzC,MAAM,EAA3B;AACA,QAAM0C,cAAc,GAAG1C,MAAM,CAAC,CAAD,CAA7B;AAEA,QAAM;AACJ2C,IAAAA,OADI;AAEJC,IAAAA,WAAW,EAACC,oBAFR;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,QAAQ,EAACC,iBAJL;AAKJC,IAAAA,IALI;AAKC;AACLC,IAAAA,gBAAgB,EAACC,yBANb;AAMuC;AAC3CC,IAAAA;AAPI,MAQF5B,KARJ;AAUA,QAAM;AACJ6B,IAAAA,qBADI;AAEJC,IAAAA,sBAFI;AAGJC,IAAAA,0BAHI;AAIJC,IAAAA,qBAJI;AAKJC,IAAAA,sBALI;AAKmB;AACvBC,IAAAA,kBANI;AAMe;AACnBC,IAAAA;AAPI,MAQFnC,KARJ;AAaA,QAAMuB,QAAQ,GAAGC,iBAAiB,CAACY,IAAlB,EAAjB;AACA,QAAMV,gBAAgB,GAAGC,yBAAyB,CAACS,IAA1B,EAAzB;AACA,QAAMhB,WAAW,GAAGC,oBAAoB,CAACe,IAArB,EAApB;AACA,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8C7D,QAAQ,CAAC,EAAD,CAA5D;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QACE,CAAC6C,QAAQ,CAACgB,MAAV,IACAjB,YAAY,KAAK,CAAC,CADlB,IAEA,CAACC,QAAQ,CAACD,YAAD,CAFT,IAGAC,QAAQ,CAACD,YAAD,CAAR,CAAuBkB,EAAvB,KAA8B/B,OAAO,CAAC+B,EAHtC,IAIA,CAAC3B,SALH,EAOE;AACF,QAAI4B,OAAO,GAAGlB,QAAQ,CAACD,YAAD,CAAtB;AACAZ,IAAAA,UAAU,CAAC+B,OAAD,CAAV;AACA3B,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAkB,IAAAA,qBAAqB,CAACS,OAAD,CAArB,CAZc,CAYiB;;AAC/B1B,IAAAA,QAAQ,CAAC0B,OAAT,CAAiBC,GAAjB,GAAuBrD,UAAU,CAACoD,OAAO,CAACD,EAAT,CAAjC;AACAG,IAAAA,UAAU,CAAC,MAAM;AACf5B,MAAAA,QAAQ,CAAC0B,OAAT,CAAiBG,IAAjB,GAAwBC,IAAxB,CAA6B,MAAM;AACjC/B,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,OAFD;AAGD,KAJS,CAAV;AAKAe,IAAAA,qBAAqB,CAAC,IAAD,CAArB,CAnBc,CAmBc;;AAC5BiB,IAAAA,QAAQ,CAACL,OAAO,CAACD,EAAT,CAAR;AACAtC,IAAAA,cAAc,CAAC,CAAD,CAAd,CArBc,CAqBI;;AAClBE,IAAAA,WAAW,CAAEqC,OAAO,CAACM,EAAR,GAAa,IAAd,GAAsB,CAAvB,CAAX,CAtBc,CAsBuB;AACrC;AACD,GAxBQ,EAwBN,CAACxB,QAAD,EAAWD,YAAX,CAxBM,CAAT;AA0BA5C,EAAAA,SAAS,CAAC,MAAM;AACdyC,IAAAA,OAAO,GAAGJ,QAAQ,CAAC0B,OAAT,CAAiBG,IAAjB,EAAH,GAA6B7B,QAAQ,CAAC0B,OAAT,CAAiBO,KAAjB,EAApC;AACD,GAFQ,EAEN,CAAC7B,OAAD,CAFM,CAAT;AAKAzC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAmB,IAAAA,wBAAwB,CAACyB,YAAY,CAAC2B,GAAd,CAAxB,CAA2CJ,IAA3C,CAAgDK,GAAG,IAAI;AACrDC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B9B,YAA5B;AACA6B,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB,EAFqD,CAGrD;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAVD;AAWD,GAbQ,CAAT;;AAeA,QAAMG,WAAW,GAAG,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,KAAsB;AACxC,QAAG,CAACtC,YAAY,CAACwB,OAAjB,EAAyB;AACzBvB,IAAAA,cAAc,CAACuB,OAAf,GAAyBa,OAAzB;AACA9C,IAAAA,eAAe,CAAC+C,GAAD,CAAf;AACD,GAJD;;AAMA,QAAMT,QAAQ,GAAGN,EAAE,IAAI;AACrB,QAAIgB,KAAK,GAAG,EAAZ;AACA5D,IAAAA,eAAe,CAAE4C,EAAF,CAAf,CACGK,IADH,CACSY,IAAI,IAAI;AACbN,MAAAA,OAAO,CAACC,GAAR,CAAa,SAAb,EAAwBK,IAAxB;AACAD,MAAAA,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASF,KAAjB;;AACA,UAAI,CAACA,KAAL,EAAY;AACVvC,QAAAA,YAAY,CAACwB,OAAb,GAAuB,IAAvB;AACA;AACD;;AACDxB,MAAAA,YAAY,CAACwB,OAAb,GAAuB,IAAI3C,KAAJ,CAAW0D,KAAX,EAAkBH,WAAlB,CAAvB;AACApC,MAAAA,YAAY,CAACwB,OAAb,CAAqBG,IAArB;AACA1B,MAAAA,cAAc,CAACuB,OAAf,GAAyB,CAAzB;AACAxB,MAAAA,YAAY,CAACwB,OAAb,CAAqBkB,IAArB,CAA2B,CAA3B;AACD,KAZH,EAaGC,KAbH,CAaU,MAAM;AACZ/C,MAAAA,SAAS,CAAC4B,OAAV,GAAoB,IAApB;AACA1B,MAAAA,QAAQ,CAAC0B,OAAT,CAAiBG,IAAjB;AACD,KAhBH;AAiBD,GAnBD;;AAuBA,QAAMiB,YAAY,GAAG,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACjCD,IAAAA,CAAC,CAACE,eAAF;AACAnC,IAAAA,qBAAqB,CAACkC,KAAD,CAArB;;AACA,QAAG9C,YAAY,CAACwB,OAAhB,EAAyB;AACvBxB,MAAAA,YAAY,CAACwB,OAAb,CAAqBwB,UAArB,CAAgChE,WAAW,GAAC,IAA5C;AACD;AACF,GAND;;AAQA,QAAMiE,UAAU,GAAGJ,CAAC,IAAI;AACtB5D,IAAAA,cAAc,CAAC4D,CAAC,CAACK,MAAF,CAASlE,WAAV,CAAd;AACD,GAFD;;AAIA,QAAMmE,gBAAgB,GAAGC,UAAU,IAAI;AACrC,UAAMC,OAAO,GAAGD,UAAU,GAAGlE,QAA7B;AACAD,IAAAA,cAAc,CAACoE,OAAD,CAAd;AACAvD,IAAAA,QAAQ,CAAC0B,OAAT,CAAiBxC,WAAjB,GAA+BqE,OAA/B;;AACA,QAAI,CAACnD,OAAL,EAAc;AACZU,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD;;AACD,QAAIZ,YAAY,CAACwB,OAAjB,EAA0B;AACxBxB,MAAAA,YAAY,CAACwB,OAAb,CAAqBkB,IAArB,CAA0BW,OAAO,GAAG,IAApC;AACD;AACF,GAVD,CApIqB,CA+IrB;;;AACA,QAAMC,UAAU,GAAG,MAAM;AACvBxD,IAAAA,QAAQ,CAAC0B,OAAT,CAAiBxC,WAAjB,GAA+B,CAA/B;AACArB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAmC,IAAAA,QAAQ,CAAC0B,OAAT,CAAiBG,IAAjB;AACD,GAJD;;AAMA,QAAM4B,UAAU,GAAG,MAAM;AACvB;AACA,QAAIjD,QAAQ,CAACgB,MAAT,KAAoB,CAAxB,EAA2B;AACzBgC,MAAAA,UAAU;AACV;AACD;;AACD,QAAIE,KAAK,GAAGnD,YAAY,GAAG,CAA3B;AACA,QAAImD,KAAK,GAAG,CAAZ,EAAeA,KAAK,GAAGlD,QAAQ,CAACgB,MAAT,GAAkB,CAA1B;AACf,QAAI,CAACpB,OAAL,EAAcU,qBAAqB,CAAC,IAAD,CAArB;AACdE,IAAAA,0BAA0B,CAAC0C,KAAD,CAA1B;AACD,GAVD;;AAYA,QAAMC,UAAU,GAAG,MAAM;AACvB,QAAIC,OAAO,GAAG,CAAClD,IAAI,GAAG,CAAR,IAAa,CAA3B;;AACA,QAAIkD,OAAO,KAAK,CAAhB,EAAmB;AACjB;AACA1C,MAAAA,sBAAsB,CAACP,gBAAD,CAAtB;AACA,UAAI+C,KAAK,GAAGjF,SAAS,CAAC4B,WAAD,EAAcM,gBAAd,CAArB;AACAK,MAAAA,0BAA0B,CAAC0C,KAAD,CAA1B;AACA7D,MAAAA,WAAW,CAAC,MAAD,CAAX;AACD,KAND,MAMO,IAAI+D,OAAO,KAAK,CAAhB,EAAmB;AACxB;AACA1C,MAAAA,sBAAsB,CAACP,gBAAD,CAAtB;AACAd,MAAAA,WAAW,CAAC,MAAD,CAAX;AACD,KAJM,MAIA,IAAI+D,OAAO,KAAK,CAAhB,EAAmB;AACxB;AACA,UAAIC,OAAO,GAAGrF,OAAO,CAACmC,gBAAD,CAArB;AACA,UAAI+C,KAAK,GAAGjF,SAAS,CAAC4B,WAAD,EAAcwD,OAAd,CAArB;AACA3C,MAAAA,sBAAsB,CAAC2C,OAAD,CAAtB;AACA7C,MAAAA,0BAA0B,CAAC0C,KAAD,CAA1B;AACA7D,MAAAA,WAAW,CAAC,MAAD,CAAX;AACD;;AACDsB,IAAAA,kBAAkB,CAACyC,OAAD,CAAlB;AACA3D,IAAAA,QAAQ,CAACyB,OAAT,CAAiBoC,IAAjB;AACD,GAtBD;;AAwBA,QAAMC,UAAU,GAAG,MAAM;AACvB;AACA,QAAIvD,QAAQ,CAACgB,MAAT,KAAoB,CAAxB,EAA2B;AACzBgC,MAAAA,UAAU;AACV;AACD;;AACD,QAAIE,KAAK,GAAGnD,YAAY,GAAG,CAA3B;AACA,QAAImD,KAAK,KAAKlD,QAAQ,CAACgB,MAAvB,EAA+BkC,KAAK,GAAG,CAAR;AAC/B,QAAI,CAACtD,OAAL,EAAcU,qBAAqB,CAAC,IAAD,CAArB;AACdE,IAAAA,0BAA0B,CAAC0C,KAAD,CAA1B;AACD,GAVD;;AAYA,QAAMM,SAAS,GAAG,MAAM;AACtB,QAAItD,IAAI,KAAKhC,QAAQ,CAACuF,IAAtB,EAA4B;AAC1BT,MAAAA,UAAU;AACX,KAFD,MAEO;AACLO,MAAAA,UAAU;AACX;AACF,GAND;;AAOA,sBACE;AAAA,eACIxF,aAAa,CAAC8B,WAAD,CAAb,GAA6B,IAA7B,gBACA,QAAC,UAAD;AACE,MAAA,IAAI,EAAEA,WADR;AAEE,MAAA,UAAU,EAAEQ,UAFd;AAGE,MAAA,OAAO,EAAET,OAHX;AAIE,MAAA,gBAAgB,EAAEgB,wBAJpB;AAKE,MAAA,YAAY,EAAE0B,YALhB;AAME,MAAA,OAAO,EAAExD,OANX;AAOE,MAAA,sBAAsB,EAAE4B,sBAP1B;AAQE,MAAA,cAAc,EAAEH;AARlB;AAAA;AAAA;AAAA;AAAA,YAFJ,EAcIxC,aAAa,CAAC8B,WAAD,CAAb,GAA6B,IAA7B,gBACA,QAAC,YAAD;AACE,MAAA,IAAI,EAAEA,WADR;AAEE,MAAA,UAAU,EAAEQ,UAFd;AAGE,MAAA,OAAO,EAAET,OAHX;AAIE,MAAA,IAAI,EAAEM,IAJR;AAKE,MAAA,YAAY,EAAER,YAAY,CAACwB,OAL7B;AAME,MAAA,mBAAmB,EAAElC,mBANvB;AAOE,MAAA,cAAc,EAAEW,cAAc,CAACuB,OAPjC;AAQE,MAAA,UAAU,EAAEiC,UARd;AASE,MAAA,QAAQ,EAAEvE,QATZ;AAUE,MAAA,WAAW,EAAEF,WAVf;AAWE,MAAA,OAAO,EAAEI,OAXX;AAYE,MAAA,gBAAgB,EAAE8B,wBAZpB;AAaE,MAAA,YAAY,EAAE0B,YAbhB;AAcE,MAAA,gBAAgB,EAAEO,gBAdpB;AAeE,MAAA,UAAU,EAAEI,UAfd;AAgBE,MAAA,UAAU,EAAEM,UAhBd;AAiBE,MAAA,sBAAsB,EAAE7C,sBAjB1B;AAkBE,MAAA,cAAc,EAAEH;AAlBlB;AAAA;AAAA;AAAA;AAAA,YAfJ,eAqCE;AACE,MAAA,GAAG,EAAEf,QADP;AAEE,MAAA,YAAY,EAAEmD,UAFhB;AAGE,MAAA,OAAO,EAAEa;AAHX;AAAA;AAAA;AAAA;AAAA,YArCF,eA0CE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YA1CF,eA2CE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEpE,QAAb;AAAuB,MAAA,GAAG,EAAEK;AAA5B;AAAA;AAAA;AAAA;AAAA,YA3CF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+CD,C,CAED;;;GA9PSjB,M;;KAAAA,M;;AA+PT,MAAMkF,eAAe,GAAGlB,KAAK,KAAK;AAChCnC,EAAAA,UAAU,EAAEmC,KAAK,CAACmB,KAAN,CAAY,CAAC,QAAD,EAAW,YAAX,CAAZ,CADoB;AAEhC/D,EAAAA,OAAO,EAAE4C,KAAK,CAACmB,KAAN,CAAY,CAAC,QAAD,EAAW,SAAX,CAAZ,CAFuB;AAGhC9D,EAAAA,WAAW,EAAE2C,KAAK,CAACmB,KAAN,CAAY,CAAC,QAAD,EAAW,aAAX,CAAZ,CAHmB;AAIhCC,EAAAA,YAAY,EAAEpB,KAAK,CAACmB,KAAN,CAAY,CAAC,QAAD,EAAW,cAAX,CAAZ,CAJkB;AAKhCzD,EAAAA,IAAI,EAAEsC,KAAK,CAACmB,KAAN,CAAY,CAAC,QAAD,EAAW,MAAX,CAAZ,CAL0B;AAMhC5D,EAAAA,YAAY,EAAEyC,KAAK,CAACmB,KAAN,CAAY,CAAC,QAAD,EAAW,cAAX,CAAZ,CANkB;AAOhC3D,EAAAA,QAAQ,EAAEwC,KAAK,CAACmB,KAAN,CAAY,CAAC,QAAD,EAAW,UAAX,CAAZ,CAPsB;AAQhCxD,EAAAA,gBAAgB,EAAEqC,KAAK,CAACmB,KAAN,CAAY,CAAC,QAAD,EAAW,kBAAX,CAAZ;AARc,CAAL,CAA7B,C,CAWA;;;AACA,MAAME,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLxD,IAAAA,qBAAqB,CAAC4B,IAAD,EAAO;AAC1B4B,MAAAA,QAAQ,CAACzG,kBAAkB,CAAC6E,IAAD,CAAnB,CAAR;AACD,KAHI;;AAILtB,IAAAA,wBAAwB,CAACsB,IAAD,EAAO;AAC7B4B,MAAAA,QAAQ,CAACnG,gBAAgB,CAACuE,IAAD,CAAjB,CAAR;AACD,KANI;;AAOL3B,IAAAA,sBAAsB,CAAC2B,IAAD,EAAO;AAC3B4B,MAAAA,QAAQ,CAACxG,kBAAkB,CAAC4E,IAAD,CAAnB,CAAR;AACD,KATI;;AAUL1B,IAAAA,0BAA0B,CAAC0C,KAAD,EAAQ;AAChCY,MAAAA,QAAQ,CAACvG,kBAAkB,CAAC2F,KAAD,CAAnB,CAAR;AACD,KAZI;;AAaLzC,IAAAA,qBAAqB,CAACyB,IAAD,EAAO;AAC1B4B,MAAAA,QAAQ,CAACtG,iBAAiB,CAAC0E,IAAD,CAAlB,CAAR;AACD,KAfI;;AAgBLvB,IAAAA,kBAAkB,CAACuB,IAAD,EAAO;AACvB4B,MAAAA,QAAQ,CAACpG,cAAc,CAACwE,IAAD,CAAf,CAAR;AACD,KAlBI;;AAmBLxB,IAAAA,sBAAsB,CAACwB,IAAD,EAAO;AAC3B4B,MAAAA,QAAQ,CAACrG,cAAc,CAACyE,IAAD,CAAf,CAAR;AACD;;AArBI,GAAP;AAuBD,CAxBD,C,CA0BA;;;AACA,eAAe9E,OAAO,CACpBsG,eADoB,EAEpBG,kBAFoB,CAAP,eAGb7G,KAAK,CAAC+G,IAAN,CAAWvF,MAAX,CAHa,CAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  changePlayingState,\n  changeShowPlayList,\n  changeCurrentIndex,\n  changeCurrentSong,\n  changePlayList,\n  changePlayMode,\n  changeFullScreen\n} from \"./store/actionCreators\";\nimport MiniPlayer from './miniPlayer';\nimport NormalPlayer from './normalPlayer';\nimport { getSongUrl, isEmptyObject, shuffle, findIndex } from \"../../api/utils\";\nimport { playMode } from '../../api/config';\nimport Toast from \"./../../baseUI/toast/index\";\nimport PlayList from './play-list/index';\nimport { getLyricRequest, getOneMusicPlayerRequest } from \"../../api/request\";\nimport Lyric from './../../api/lyric-parser';\nfunction Player(props) {\n  //目前播放时间\n  const [currentTime, setCurrentTime] = useState(0);\n  //歌曲总时长\n  const [duration, setDuration] = useState(0);\n  //歌曲播放进度\n  let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\n  const [currentPlayingLyric, setPlayingLyric] = useState(\"\");\n  const [preSong, setPreSong] = useState({});\n  const [modeText, setModeText] = useState(\"\");\n  const [songReady, setSongReady] = useState(true);\n\n  const audioRef = useRef();\n  const toastRef = useRef();\n  const currentLyric = useRef();\n  const currentLineNum = useRef(0);\n\n  const {\n    playing,\n    currentSong:immutableCurrentSong,\n    currentIndex,\n    playList:immutablePlayList,\n    mode,//播放模式\n    sequencePlayList:immutableSequencePlayList,//顺序列表\n    fullScreen\n  } = props;\n  \n  const {\n    togglePlayingDispatch,\n    togglePlayListDispatch,\n    changeCurrentIndexDispatch,\n    changeCurrentDispatch,\n    changePlayListDispatch,//改变playList\n    changeModeDispatch,//改变mode\n    toggleFullScreenDispatch,\n  } = props;\n\n\n  \n  \n  const playList = immutablePlayList.toJS();\n  const sequencePlayList = immutableSequencePlayList.toJS();\n  const currentSong = immutableCurrentSong.toJS();\n  const [currentMusicPlayer, setCurrentMusicPlayer] = useState('');\n\n  useEffect(() => {\n    if (\n      !playList.length ||\n      currentIndex === -1 ||\n      !playList[currentIndex] ||\n      playList[currentIndex].id === preSong.id ||\n      !songReady\n    )\n      return;\n    let current = playList[currentIndex];\n    setPreSong(current);\n    setSongReady(false);\n    changeCurrentDispatch(current);//赋值currentSong\n    audioRef.current.src = getSongUrl(current.id);\n    setTimeout(() => {\n      audioRef.current.play().then(() => {\n        setSongReady(true);\n      });\n    });\n    togglePlayingDispatch(true);//播放状态\n    getLyric(current.id);\n    setCurrentTime(0);//从头开始播放\n    setDuration((current.dt / 1000) | 0);//时长\n    // eslint-disable-next-line\n  }, [playList, currentIndex]);\n\n  useEffect(() => {\n    playing ? audioRef.current.play() : audioRef.current.pause();\n  }, [playing]);\n  \n\n  useEffect(() => {\n    //先获取歌曲播放链接\n    getOneMusicPlayerRequest(currentIndex.mid).then(res => {\n      console.log('currentIndex', currentIndex);\n      console.log('res----', res)\n      // let data =  res.response.data.playUrl;\n      // if(!data.error) {\n      //   data = data.url;\n      // }else {\n      //   data = data.error\n      // }\n      // setCurrentMusicPlayer(data)\n    })\n  })\n\n  const handleLyric = ({ lineNum, txt }) => {\n    if(!currentLyric.current)return;\n    currentLineNum.current = lineNum;\n    setPlayingLyric(txt);\n  };\n  \n  const getLyric = id => {\n    let lyric = \"\";\n    getLyricRequest (id)\n      .then (data => {\n        console.log ('data---', data)\n        lyric = data.lrc.lyric;\n        if (!lyric) {\n          currentLyric.current = null;\n          return;\n        }\n        currentLyric.current = new Lyric (lyric, handleLyric);\n        currentLyric.current.play ();\n        currentLineNum.current = 0;\n        currentLyric.current.seek (0);\n      })\n      .catch (() => {\n        songReady.current = true;\n        audioRef.current.play ();\n      });\n  };\n\n  \n\n  const clickPlaying = (e, state) => {\n    e.stopPropagation();\n    togglePlayingDispatch(state);\n    if(currentLyric.current) {\n      currentLyric.current.togglePlay(currentTime*1000);\n    }\n  };\n\n  const updateTime = e => {\n    setCurrentTime(e.target.currentTime);\n  };\n\n  const onProgressChange = curPercent => {\n    const newTime = curPercent * duration;\n    setCurrentTime(newTime);\n    audioRef.current.currentTime = newTime;\n    if (!playing) {\n      togglePlayingDispatch(true);\n    }\n    if (currentLyric.current) {\n      currentLyric.current.seek(newTime * 1000);\n    }\n  };\n  //一首歌循环\n  const handleLoop = () => {\n    audioRef.current.currentTime = 0;\n    changePlayingState(true);\n    audioRef.current.play();\n  };\n\n  const handlePrev = () => {\n    //播放列表只有一首歌时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n    let index = currentIndex - 1;\n    if (index < 0) index = playList.length - 1;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  const changeMode = () => {\n    let newMode = (mode + 1) % 3;\n    if (newMode === 0) {\n      //顺序模式\n      changePlayListDispatch(sequencePlayList);\n      let index = findIndex(currentSong, sequencePlayList);\n      changeCurrentIndexDispatch(index);\n      setModeText(\"顺序循环\");\n    } else if (newMode === 1) {\n      //单曲循环\n      changePlayListDispatch(sequencePlayList);\n      setModeText(\"单曲循环\");\n    } else if (newMode === 2) {\n      //随机播放\n      let newList = shuffle(sequencePlayList);\n      let index = findIndex(currentSong, newList);\n      changePlayListDispatch(newList);\n      changeCurrentIndexDispatch(index);\n      setModeText(\"随机播放\");\n    }\n    changeModeDispatch(newMode);\n    toastRef.current.show();\n  };\n\n  const handleNext = () => {\n    //播放列表只有一首歌时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n    let index = currentIndex + 1;\n    if (index === playList.length) index = 0;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  const handleEnd = () => {\n    if (mode === playMode.loop) {\n      handleLoop();\n    } else {\n      handleNext();\n    }\n  };\n  return (\n    <div>\n      { isEmptyObject(currentSong) ? null : (\n        <MiniPlayer\n          song={currentSong}\n          fullScreen={fullScreen}\n          playing={playing}\n          toggleFullScreen={toggleFullScreenDispatch}\n          clickPlaying={clickPlaying}\n          percent={percent}\n          changePlayListDispatch={changePlayListDispatch}\n          togglePlayList={togglePlayListDispatch}\n        /> \n        )\n      }\n      { isEmptyObject(currentSong) ? null : (\n        <NormalPlayer\n          song={currentSong}\n          fullScreen={fullScreen}\n          playing={playing}\n          mode={mode}\n          currentLyric={currentLyric.current}\n          currentPlayingLyric={currentPlayingLyric}\n          currentLineNum={currentLineNum.current}\n          changeMode={changeMode}\n          duration={duration}\n          currentTime={currentTime}\n          percent={percent}\n          toggleFullScreen={toggleFullScreenDispatch}\n          clickPlaying={clickPlaying}\n          onProgressChange={onProgressChange}\n          handlePrev={handlePrev}\n          handleNext={handleNext}\n          changePlayListDispatch={changePlayListDispatch}\n          togglePlayList={togglePlayListDispatch}\n        />\n        )\n      }\n      <audio\n        ref={audioRef}\n        onTimeUpdate={updateTime}\n        onEnded={handleEnd}\n      ></audio>\n      <PlayList></PlayList>\n      <Toast text={modeText} ref={toastRef}></Toast>  \n    </div>\n  )\n}\n\n// 映射Redux全局的state到组件的props上\nconst mapStateToProps = state => ({\n  fullScreen: state.getIn([\"player\", \"fullScreen\"]),\n  playing: state.getIn([\"player\", \"playing\"]),\n  currentSong: state.getIn([\"player\", \"currentSong\"]),\n  showPlayList: state.getIn([\"player\", \"showPlayList\"]),\n  mode: state.getIn([\"player\", \"mode\"]),\n  currentIndex: state.getIn([\"player\", \"currentIndex\"]),\n  playList: state.getIn([\"player\", \"playList\"]),\n  sequencePlayList: state.getIn([\"player\", \"sequencePlayList\"])\n});\n\n// 映射dispatch到props上\nconst mapDispatchToProps = dispatch => {\n  return {\n    togglePlayingDispatch(data) {\n      dispatch(changePlayingState(data));\n    },\n    toggleFullScreenDispatch(data) {\n      dispatch(changeFullScreen(data));\n    },\n    togglePlayListDispatch(data) {\n      dispatch(changeShowPlayList(data));\n    },\n    changeCurrentIndexDispatch(index) {\n      dispatch(changeCurrentIndex(index));\n    },\n    changeCurrentDispatch(data) {\n      dispatch(changeCurrentSong(data));\n    },\n    changeModeDispatch(data) {\n      dispatch(changePlayMode(data));\n    },\n    changePlayListDispatch(data) {\n      dispatch(changePlayList(data));\n    }\n  };\n};\n\n// 将ui组件包装成容器组件\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(React.memo(Player));"]},"metadata":{},"sourceType":"module"}