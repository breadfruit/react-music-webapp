{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Desktop/react-music-webapp/src/application/Player/miniPlayer/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { MiniPlayerContainer } from './style';\nimport { getName } from '../../../api/utils';\nimport { CSSTransition } from \"react-transition-group\";\nimport ProgressCircle from '../../../baseUI/progress-circle/index';\nimport { getImageUrlRequest } from '../../../api/request';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MiniPlayer(props) {\n  _s();\n\n  const miniPlayerRef = useRef();\n  const {\n    fullScreen,\n    song,\n    playing,\n    percent\n  } = props;\n  const {\n    clickPlaying,\n    toggleFullScreen,\n    togglePlayList,\n    setFullScreen\n  } = props;\n\n  const handleTogglePlaList = e => {\n    togglePlayList(true);\n    e.stopPropagation();\n  };\n\n  const [currentMusicImage, setCurrentMusicImage] = useState('');\n  useEffect(() => {\n    //获取当前歌曲播放的专辑图片\n    getImageUrlRequest(song.mid).then(res => {\n      let data = res.response.data.imageUrl;\n      console.log('当前播放歌曲的专辑照片---', data);\n      setCurrentMusicImage(data);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(CSSTransition, {\n    in: !fullScreen,\n    timeout: 400,\n    classNames: \"mini\",\n    onEnter: () => {\n      miniPlayerRef.current.style.display = \"flex\";\n    },\n    onExited: () => {\n      miniPlayerRef.current.style.display = \"none\";\n    },\n    children: /*#__PURE__*/_jsxDEV(MiniPlayerContainer, {\n      ref: miniPlayerRef,\n      onClick: () => toggleFullScreen(true),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"imgWrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: `play ? ${playing ? \"\" : \"pause\"} `,\n            src: song.al.picUrl,\n            width: \"40\",\n            height: \"40\",\n            alt: \"img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"name\",\n          children: song.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"desc\",\n          children: getName(song.ar)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control\",\n        children: /*#__PURE__*/_jsxDEV(ProgressCircle, {\n          radius: 32,\n          percent: percent,\n          children: playing ? /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"icon-mini iconfont icon-pause\",\n            onClick: e => clickPlaying(e, false),\n            children: \"\\uE650\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 39\n          }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"icon-mini iconfont icon-play\",\n            onClick: e => clickPlaying(e, true),\n            children: \"\\uE650\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control\",\n        onClick: handleTogglePlaLis,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"iconfont\",\n          children: \"\\uE640\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MiniPlayer, \"PMKfVaS+IKlKIyNiSnr9vABYVjQ=\");\n\n_c = MiniPlayer;\nexport default _c2 = /*#__PURE__*/React.memo(MiniPlayer);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MiniPlayer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/macos/Desktop/react-music-webapp/src/application/Player/miniPlayer/index.js"],"names":["React","useEffect","useRef","MiniPlayerContainer","getName","CSSTransition","ProgressCircle","getImageUrlRequest","MiniPlayer","props","miniPlayerRef","fullScreen","song","playing","percent","clickPlaying","toggleFullScreen","togglePlayList","setFullScreen","handleTogglePlaList","e","stopPropagation","currentMusicImage","setCurrentMusicImage","useState","mid","then","res","data","response","imageUrl","console","log","current","style","display","al","picUrl","name","ar","handleTogglePlaLis","memo"],"mappings":"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","sourcesContent":["import React,{useEffect, useRef} from 'react'\nimport {\n    MiniPlayerContainer\n\n} from './style'\nimport { getName } from '../../../api/utils'\nimport { CSSTransition } from \"react-transition-group\";\nimport ProgressCircle from '../../../baseUI/progress-circle/index'\nimport {getImageUrlRequest } from '../../../api/request'\n\n\nfunction MiniPlayer (props) {\n    const miniPlayerRef = useRef ();\n    const { fullScreen, song, playing, percent} = props;\n    const { clickPlaying, toggleFullScreen, togglePlayList, setFullScreen } = props;\n    const handleTogglePlaList = (e) => {\n        togglePlayList(true);\n        e.stopPropagation ();\n    }\n    const [currentMusicImage, setCurrentMusicImage] = useState('')\n    useEffect(() => {\n            //获取当前歌曲播放的专辑图片\n    getImageUrlRequest(song.mid).then(res => {\n        let data = res.response.data.imageUrl;\n        console.log('当前播放歌曲的专辑照片---', data)\n        setCurrentMusicImage(data)\n      })\n    })\n    return (\n        <CSSTransition\n            in={!fullScreen} \n            timeout={400} \n            classNames=\"mini\" \n            onEnter={() => {\n            miniPlayerRef.current.style.display = \"flex\";\n            }}\n            onExited={() => {\n            miniPlayerRef.current.style.display = \"none\";\n            }}\n        >\n            <MiniPlayerContainer ref={miniPlayerRef} onClick={() => toggleFullScreen (true)}>\n                <div className=\"icon\">\n                    <div className=\"imgWrapper\">\n                        <img className={`play ? ${playing ? \"\": \"pause\"} `} src={song.al.picUrl} width=\"40\" height=\"40\" alt=\"img\" />\n                    </div>\n                </div>\n                <div className=\"text\">\n                    <h2 className=\"name\">{song.name}</h2>\n                    <p className=\"desc\">{getName (song.ar)}</p>\n                </div>\n                <div className=\"control\">\n                    <ProgressCircle radius={32} percent={percent}>\n                        {\n                            playing ? <i className=\"icon-mini iconfont icon-pause\" onClick={e => clickPlaying(e, false)}>&#xe650;</i>\n                            : <i className=\"icon-mini iconfont icon-play\" onClick={e => clickPlaying(e, true)}>&#xe650;</i>\n                        }\n                    </ProgressCircle>\n                </div>\n                <div className=\"control\" onClick = {handleTogglePlaLis}>\n                    <i className=\"iconfont\">&#xe640;</i>\n                </div>\n            </MiniPlayerContainer>\n        </CSSTransition>\n    )\n}\n\nexport default React.memo(MiniPlayer);"]},"metadata":{},"sourceType":"module"}