{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Desktop/react-music-webapp/src/application/Player/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { changePlayingState, changeShowPlayList, changeCurrentIndex, changeCurrentSong, changePlayList, changePlayMode, changeFullScreen } from \"./store/actionCreators\";\nimport MiniPlayer from './miniPlayer';\nimport NormalPlayer from './normalPlayer';\nimport { getSongUrl, isEmptyObject, shuffle, findIndex } from \"../../api/utils\";\nimport { playMode } from '../../api/config';\nimport Toast from \"./../../baseUI/toast/index\";\nimport PlayList from './play-list/index';\nimport { getLyricRequest } from \"../../api/request\";\nimport Lyric from './../../api/lyric-parser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Player(props) {\n  _s();\n\n  //目前播放时间\n  const [currentTime, setCurrentTime] = useState(0); //歌曲总时长\n\n  const [duration, setDuration] = useState(0); //歌曲播放进度\n\n  let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\n  const [currentPlayingLyric, setPlayingLyric] = useState(\"\");\n  const [preSong, setPreSong] = useState({});\n  const [modeText, setModeText] = useState(\"\");\n  const [songReady, setSongReady] = useState(true);\n  const audioRef = useRef();\n  const toastRef = useRef();\n  const currentLyric = useRef();\n  const currentLineNum = useRef(0);\n  const {\n    playing,\n    currentSong: immutableCurrentSong,\n    currentIndex,\n    playList: immutablePlayList,\n    mode,\n    //播放模式\n    sequencePlayList: immutableSequencePlayList,\n    //顺序列表\n    fullScreen\n  } = props;\n  const {\n    togglePlayingDispatch,\n    togglePlayListDispatch,\n    changeCurrentIndexDispatch,\n    changeCurrentDispatch,\n    changePlayListDispatch,\n    //改变playList\n    changeModeDispatch,\n    //改变mode\n    toggleFullScreenDispatch\n  } = props;\n  const playList = immutablePlayList.toJS();\n  const sequencePlayList = immutableSequencePlayList.toJS();\n  const currentSong = immutableCurrentSong.toJS();\n  useEffect(() => {\n    if (!playList.length || currentIndex === -1 || !playList[currentIndex] || playList[currentIndex].id === preSong.id || !songReady) return;\n    let current = playList[currentIndex];\n    setPreSong(current);\n    setSongReady(false);\n    changeCurrentDispatch(current); //赋值currentSong\n\n    audioRef.current.src = getSongUrl(current.id);\n    setTimeout(() => {\n      audioRef.current.play().then(() => {\n        setSongReady(true);\n      });\n    });\n    togglePlayingDispatch(true); //播放状态\n\n    getLyric(current.id);\n    setCurrentTime(0); //从头开始播放\n\n    setDuration(current.dt / 1000 | 0); //时长\n    // eslint-disable-next-line\n  }, [playList, currentIndex]);\n  useEffect(() => {\n    playing ? audioRef.current.play() : audioRef.current.pause();\n  }, [playing]); // const handleLyric = ({ lineNum, txt }) => {\n  //   if(!currentLyric.current)return;\n  //   currentLineNum.current = lineNum;\n  //   setPlayingLyric(txt);\n  // };\n\n  const getLyric = id => {\n    let lyric = \"\";\n\n    if (currentLyric.current) {\n      currentLyric.current.stop();\n    } // 避免songReady恒为false的情况\n\n\n    getLyricRequest(id).then(data => {\n      console.log(data);\n      lyric = data.lrc.lyric;\n\n      if (!lyric) {\n        currentLyric.current = null;\n        return;\n      } // currentLyric.current = new Lyric(lyric, handleLyric);\n      // currentLyric.current.play();\n      // currentLineNum.current = 0;\n      // currentLyric.current.seek(0);\n\n    }).catch(() => {\n      songReady.current = true;\n      audioRef.current.play();\n    });\n  };\n\n  const clickPlaying = (e, state) => {\n    e.stopPropagation();\n    togglePlayingDispatch(state);\n\n    if (currentLyric.current) {\n      currentLyric.current.togglePlay(currentTime * 1000);\n    }\n  };\n\n  const updateTime = e => {\n    setCurrentTime(e.target.currentTime);\n  };\n\n  const onProgressChange = curPercent => {\n    const newTime = curPercent * duration;\n    setCurrentTime(newTime);\n    audioRef.current.currentTime = newTime;\n\n    if (!playing) {\n      togglePlayingDispatch(true);\n    }\n\n    if (currentLyric.current) {\n      currentLyric.current.seek(newTime * 1000);\n    }\n  }; //一首歌循环\n\n\n  const handleLoop = () => {\n    audioRef.current.currentTime = 0;\n    changePlayingState(true);\n    audioRef.current.play();\n  };\n\n  const handlePrev = () => {\n    //播放列表只有一首歌时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n\n    let index = currentIndex - 1;\n    if (index < 0) index = playList.length - 1;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  const changeMode = () => {\n    let newMode = (mode + 1) % 3;\n\n    if (newMode === 0) {\n      //顺序模式\n      changePlayListDispatch(sequencePlayList);\n      let index = findIndex(currentSong, sequencePlayList);\n      changeCurrentIndexDispatch(index);\n      setModeText(\"顺序循环\");\n    } else if (newMode === 1) {\n      //单曲循环\n      changePlayListDispatch(sequencePlayList);\n      setModeText(\"单曲循环\");\n    } else if (newMode === 2) {\n      //随机播放\n      let newList = shuffle(sequencePlayList);\n      let index = findIndex(currentSong, newList);\n      changePlayListDispatch(newList);\n      changeCurrentIndexDispatch(index);\n      setModeText(\"随机播放\");\n    }\n\n    changeModeDispatch(newMode);\n    toastRef.current.show();\n  };\n\n  const handleNext = () => {\n    //播放列表只有一首歌时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n\n    let index = currentIndex + 1;\n    if (index === playList.length) index = 0;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  const handleEnd = () => {\n    if (mode === playMode.loop) {\n      handleLoop();\n    } else {\n      handleNext();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isEmptyObject(currentSong) ? null : /*#__PURE__*/_jsxDEV(MiniPlayer, {\n      song: currentSong,\n      fullScreen: fullScreen,\n      playing: playing,\n      toggleFullScreen: toggleFullScreenDispatch,\n      clickPlaying: clickPlaying,\n      percent: percent,\n      changePlayListDispatch: changePlayListDispatch,\n      togglePlayList: togglePlayListDispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this), isEmptyObject(currentSong) ? null : /*#__PURE__*/_jsxDEV(NormalPlayer, {\n      song: currentSong,\n      fullScreen: fullScreen,\n      playing: playing,\n      mode: mode,\n      currentLyric: currentLyric.current,\n      currentPlayingLyric: currentPlayingLyric,\n      currentLineNum: currentLineNum.current,\n      changeMode: changeMode,\n      duration: duration,\n      currentTime: currentTime,\n      percent: percent,\n      toggleFullScreen: toggleFullScreenDispatch,\n      clickPlaying: clickPlaying,\n      onProgressChange: onProgressChange,\n      handlePrev: handlePrev,\n      handleNext: handleNext,\n      changePlayListDispatch: changePlayListDispatch,\n      togglePlayList: togglePlayListDispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      onTimeUpdate: updateTime,\n      onEnded: handleEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      text: modeText,\n      ref: toastRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n} // 映射Redux全局的state到组件的props上\n\n\n_s(Player, \"tvp1bopYDEOx87NGUz84AVJvdg8=\");\n\n_c = Player;\n\nconst mapStateToProps = state => ({\n  fullScreen: state.getIn([\"player\", \"fullScreen\"]),\n  playing: state.getIn([\"player\", \"playing\"]),\n  currentSong: state.getIn([\"player\", \"currentSong\"]),\n  showPlayList: state.getIn([\"player\", \"showPlayList\"]),\n  mode: state.getIn([\"player\", \"mode\"]),\n  currentIndex: state.getIn([\"player\", \"currentIndex\"]),\n  playList: state.getIn([\"player\", \"playList\"]),\n  sequencePlayList: state.getIn([\"player\", \"sequencePlayList\"])\n}); // 映射dispatch到props上\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    togglePlayingDispatch(data) {\n      dispatch(changePlayingState(data));\n    },\n\n    toggleFullScreenDispatch(data) {\n      dispatch(changeFullScreen(data));\n    },\n\n    togglePlayListDispatch(data) {\n      dispatch(changeShowPlayList(data));\n    },\n\n    changeCurrentIndexDispatch(index) {\n      dispatch(changeCurrentIndex(index));\n    },\n\n    changeCurrentDispatch(data) {\n      dispatch(changeCurrentSong(data));\n    },\n\n    changeModeDispatch(data) {\n      dispatch(changePlayMode(data));\n    },\n\n    changePlayListDispatch(data) {\n      dispatch(changePlayList(data));\n    }\n\n  };\n}; // 将ui组件包装成容器组件\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/React.memo(Player));\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/macos/Desktop/react-music-webapp/src/application/Player/index.js"],"names":["React","useRef","useState","useEffect","connect","changePlayingState","changeShowPlayList","changeCurrentIndex","changeCurrentSong","changePlayList","changePlayMode","changeFullScreen","MiniPlayer","NormalPlayer","getSongUrl","isEmptyObject","shuffle","findIndex","playMode","Toast","PlayList","getLyricRequest","Lyric","Player","props","currentTime","setCurrentTime","duration","setDuration","percent","isNaN","currentPlayingLyric","setPlayingLyric","preSong","setPreSong","modeText","setModeText","songReady","setSongReady","audioRef","toastRef","currentLyric","currentLineNum","playing","currentSong","immutableCurrentSong","currentIndex","playList","immutablePlayList","mode","sequencePlayList","immutableSequencePlayList","fullScreen","togglePlayingDispatch","togglePlayListDispatch","changeCurrentIndexDispatch","changeCurrentDispatch","changePlayListDispatch","changeModeDispatch","toggleFullScreenDispatch","toJS","length","id","current","src","setTimeout","play","then","getLyric","dt","pause","lyric","stop","data","console","log","lrc","catch","clickPlaying","e","state","stopPropagation","togglePlay","updateTime","target","onProgressChange","curPercent","newTime","seek","handleLoop","handlePrev","index","changeMode","newMode","newList","show","handleNext","handleEnd","loop","mapStateToProps","getIn","showPlayList","mapDispatchToProps","dispatch","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  changePlayingState,\n  changeShowPlayList,\n  changeCurrentIndex,\n  changeCurrentSong,\n  changePlayList,\n  changePlayMode,\n  changeFullScreen\n} from \"./store/actionCreators\";\nimport MiniPlayer from './miniPlayer';\nimport NormalPlayer from './normalPlayer';\nimport { getSongUrl, isEmptyObject, shuffle, findIndex } from \"../../api/utils\";\nimport { playMode } from '../../api/config';\nimport Toast from \"./../../baseUI/toast/index\";\nimport PlayList from './play-list/index';\nimport { getLyricRequest } from \"../../api/request\";\nimport Lyric from './../../api/lyric-parser';\nfunction Player(props) {\n  //目前播放时间\n  const [currentTime, setCurrentTime] = useState(0);\n  //歌曲总时长\n  const [duration, setDuration] = useState(0);\n  //歌曲播放进度\n  let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\n  const [currentPlayingLyric, setPlayingLyric] = useState(\"\");\n  const [preSong, setPreSong] = useState({});\n  const [modeText, setModeText] = useState(\"\");\n  const [songReady, setSongReady] = useState(true);\n\n  const audioRef = useRef();\n  const toastRef = useRef();\n  const currentLyric = useRef();\n  const currentLineNum = useRef(0);\n\n  const {\n    playing,\n    currentSong:immutableCurrentSong,\n    currentIndex,\n    playList:immutablePlayList,\n    mode,//播放模式\n    sequencePlayList:immutableSequencePlayList,//顺序列表\n    fullScreen\n  } = props;\n  \n  const {\n    togglePlayingDispatch,\n    togglePlayListDispatch,\n    changeCurrentIndexDispatch,\n    changeCurrentDispatch,\n    changePlayListDispatch,//改变playList\n    changeModeDispatch,//改变mode\n    toggleFullScreenDispatch,\n  } = props;\n  \n  const playList = immutablePlayList.toJS();\n  const sequencePlayList = immutableSequencePlayList.toJS();\n  const currentSong = immutableCurrentSong.toJS();\n\n  useEffect(() => {\n    if (\n      !playList.length ||\n      currentIndex === -1 ||\n      !playList[currentIndex] ||\n      playList[currentIndex].id === preSong.id ||\n      !songReady\n    )\n      return;\n    let current = playList[currentIndex];\n    setPreSong(current);\n    setSongReady(false);\n    changeCurrentDispatch(current);//赋值currentSong\n    audioRef.current.src = getSongUrl(current.id);\n    setTimeout(() => {\n      audioRef.current.play().then(() => {\n        setSongReady(true);\n      });\n    });\n    togglePlayingDispatch(true);//播放状态\n     getLyric(current.id);\n    setCurrentTime(0);//从头开始播放\n    setDuration((current.dt / 1000) | 0);//时长\n    // eslint-disable-next-line\n  }, [playList, currentIndex]);\n\n  useEffect(() => {\n    playing ? audioRef.current.play() : audioRef.current.pause();\n  }, [playing]);\n  \n  // const handleLyric = ({ lineNum, txt }) => {\n  //   if(!currentLyric.current)return;\n  //   currentLineNum.current = lineNum;\n  //   setPlayingLyric(txt);\n  // };\n  \n  const getLyric = id => {\n    let lyric = \"\";\n    if (currentLyric.current) {\n      currentLyric.current.stop();\n    }\n    // 避免songReady恒为false的情况\n    getLyricRequest(id)\n      .then(data => {\n        console.log(data)\n        lyric = data.lrc.lyric;\n        if(!lyric) {\n          currentLyric.current = null;\n          return;\n        }\n        // currentLyric.current = new Lyric(lyric, handleLyric);\n        // currentLyric.current.play();\n        // currentLineNum.current = 0;\n        // currentLyric.current.seek(0);\n      })\n      .catch(() => {\n        songReady.current = true;\n        audioRef.current.play();\n      });\n  };\n\n  \n\n  const clickPlaying = (e, state) => {\n    e.stopPropagation();\n    togglePlayingDispatch(state);\n    if(currentLyric.current) {\n      currentLyric.current.togglePlay(currentTime*1000);\n    }\n  };\n\n  const updateTime = e => {\n    setCurrentTime(e.target.currentTime);\n  };\n\n  const onProgressChange = curPercent => {\n    const newTime = curPercent * duration;\n    setCurrentTime(newTime);\n    audioRef.current.currentTime = newTime;\n    if (!playing) {\n      togglePlayingDispatch(true);\n    }\n    if (currentLyric.current) {\n      currentLyric.current.seek(newTime * 1000);\n    }\n  };\n  //一首歌循环\n  const handleLoop = () => {\n    audioRef.current.currentTime = 0;\n    changePlayingState(true);\n    audioRef.current.play();\n  };\n\n  const handlePrev = () => {\n    //播放列表只有一首歌时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n    let index = currentIndex - 1;\n    if (index < 0) index = playList.length - 1;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  const changeMode = () => {\n    let newMode = (mode + 1) % 3;\n    if (newMode === 0) {\n      //顺序模式\n      changePlayListDispatch(sequencePlayList);\n      let index = findIndex(currentSong, sequencePlayList);\n      changeCurrentIndexDispatch(index);\n      setModeText(\"顺序循环\");\n    } else if (newMode === 1) {\n      //单曲循环\n      changePlayListDispatch(sequencePlayList);\n      setModeText(\"单曲循环\");\n    } else if (newMode === 2) {\n      //随机播放\n      let newList = shuffle(sequencePlayList);\n      let index = findIndex(currentSong, newList);\n      changePlayListDispatch(newList);\n      changeCurrentIndexDispatch(index);\n      setModeText(\"随机播放\");\n    }\n    changeModeDispatch(newMode);\n    toastRef.current.show();\n  };\n\n  const handleNext = () => {\n    //播放列表只有一首歌时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n    let index = currentIndex + 1;\n    if (index === playList.length) index = 0;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  const handleEnd = () => {\n    if (mode === playMode.loop) {\n      handleLoop();\n    } else {\n      handleNext();\n    }\n  };\n  return (\n    <div>\n      { isEmptyObject(currentSong) ? null : (\n        <MiniPlayer\n          song={currentSong}\n          fullScreen={fullScreen}\n          playing={playing}\n          toggleFullScreen={toggleFullScreenDispatch}\n          clickPlaying={clickPlaying}\n          percent={percent}\n          changePlayListDispatch={changePlayListDispatch}\n          togglePlayList={togglePlayListDispatch}\n        /> \n        )\n      }\n      { isEmptyObject(currentSong) ? null : (\n        <NormalPlayer\n          song={currentSong}\n          fullScreen={fullScreen}\n          playing={playing}\n          mode={mode}\n          currentLyric={currentLyric.current}\n          currentPlayingLyric={currentPlayingLyric}\n          currentLineNum={currentLineNum.current}\n          changeMode={changeMode}\n          duration={duration}\n          currentTime={currentTime}\n          percent={percent}\n          toggleFullScreen={toggleFullScreenDispatch}\n          clickPlaying={clickPlaying}\n          onProgressChange={onProgressChange}\n          handlePrev={handlePrev}\n          handleNext={handleNext}\n          changePlayListDispatch={changePlayListDispatch}\n          togglePlayList={togglePlayListDispatch}\n        />\n        )\n      }\n      <audio\n        ref={audioRef}\n        onTimeUpdate={updateTime}\n        onEnded={handleEnd}\n      ></audio>\n      <PlayList></PlayList>\n      <Toast text={modeText} ref={toastRef}></Toast>  \n    </div>\n  )\n}\n\n// 映射Redux全局的state到组件的props上\nconst mapStateToProps = state => ({\n  fullScreen: state.getIn([\"player\", \"fullScreen\"]),\n  playing: state.getIn([\"player\", \"playing\"]),\n  currentSong: state.getIn([\"player\", \"currentSong\"]),\n  showPlayList: state.getIn([\"player\", \"showPlayList\"]),\n  mode: state.getIn([\"player\", \"mode\"]),\n  currentIndex: state.getIn([\"player\", \"currentIndex\"]),\n  playList: state.getIn([\"player\", \"playList\"]),\n  sequencePlayList: state.getIn([\"player\", \"sequencePlayList\"])\n});\n\n// 映射dispatch到props上\nconst mapDispatchToProps = dispatch => {\n  return {\n    togglePlayingDispatch(data) {\n      dispatch(changePlayingState(data));\n    },\n    toggleFullScreenDispatch(data) {\n      dispatch(changeFullScreen(data));\n    },\n    togglePlayListDispatch(data) {\n      dispatch(changeShowPlayList(data));\n    },\n    changeCurrentIndexDispatch(index) {\n      dispatch(changeCurrentIndex(index));\n    },\n    changeCurrentDispatch(data) {\n      dispatch(changeCurrentSong(data));\n    },\n    changeModeDispatch(data) {\n      dispatch(changePlayMode(data));\n    },\n    changePlayListDispatch(data) {\n      dispatch(changePlayList(data));\n    }\n  };\n};\n\n// 将ui组件包装成容器组件\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(React.memo(Player));"]},"metadata":{},"sourceType":"module"}