{"ast":null,"code":"export const debounce = (func, delay) => {\n  let timer;\n  return function (...args) {\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(() => {\n      func.apply(this, args);\n      clearTimeout(timer);\n    }, delay);\n  };\n}; // 处理数据，找出第一个没有歌名的排行榜的索引\n\nexport const filterIndex = rankList => {\n  for (let i = 0; i < rankList.length - 1; i++) {\n    if (rankList[i].tracks.length && !rankList[i + 1].tracks.length) {\n      return i + 1;\n    }\n  }\n}; // export const getName = list => {\n//   let str = \"\";\n//   list.map((item, index) => {\n//     str += index === 0 ? item.name : \"/\" + item.name;\n//     return item;\n//   });\n//   return str;\n// };\n\nexport const getName = list => {\n  let str = list.singer.name + '-' + list.album.name;\n  list.map((item, index) => {\n    str += list.singer.name + '-' + list.album.name;\n    return item;\n  });\n  return str;\n};\nexport const getCount = count => {\n  if (count < 0) return;\n\n  if (count < 10000) {\n    return count;\n  } else if (Math.floor(count / 10000) < 10000) {\n    return Math.floor(count / 10000) + \"万\";\n  } else {\n    return Math.floor(count / 10000000) / 10 + \"亿\";\n  }\n}; // 给css3相关属性增加浏览器前缀，处理浏览器兼容性问题\n\nlet elementStyle = document.createElement(\"div\").style;\n\nlet vendor = (() => {\n  //首先通过transition属性判断是何种浏览器\n  let transformNames = {\n    webkit: \"webkitTransform\",\n    Moz: \"MozTransform\",\n    O: \"OTransfrom\",\n    ms: \"msTransform\",\n    standard: \"Transform\"\n  };\n\n  for (let key in transformNames) {\n    if (elementStyle[transformNames[key]] !== undefined) {\n      return key;\n    }\n  }\n\n  return false;\n})(); //trasfor属性具有兼容问题\n\n\nexport function prefixStyle(style) {\n  if (vendor === false) {\n    return false;\n  }\n\n  if (vendor === 'standard') {\n    return style;\n  }\n\n  console.log(vendor + style.charAt(0).toUpperCase() + style.substr(1)); //webkitTransform\n\n  return vendor + style.charAt(0).toUpperCase() + style.substr(1);\n} //转换歌曲播放时间\n\nexport const formatPlayTime = interval => {\n  interval = interval | 0; // |0表示向下取整\n\n  const minute = interval / 60 | 0;\n  const second = (interval % 60).toString().padStart(2, \"0\");\n  return `${minute}:${second}`;\n};\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} // 随机算法\n\n\nexport function shuffle(arr) {\n  let new_arr = [];\n  arr.forEach(item => {\n    new_arr.push(item);\n  });\n\n  for (let i = 0; i < new_arr.length; i++) {\n    let j = getRandomInt(0, i);\n    let t = new_arr[i];\n    new_arr[i] = new_arr[j];\n    new_arr[j] = t;\n  }\n\n  return new_arr;\n} // 找到当前的歌曲索引\n\nexport const findIndex = (song, list) => {\n  return list.findIndex(item => {\n    return song.id === item.id;\n  });\n}; //拼接出歌曲的url链接\n\nexport const getSongUrl = id => {\n  return `https://music.163.com/song/media/outer/url?id=${id}.mp3`;\n};\nexport const isEmptyObject = obj => !obj || Object.keys(obj).length === 0;","map":{"version":3,"sources":["/Users/macos/Desktop/react-music-webapp/src/api/utils.js"],"names":["debounce","func","delay","timer","args","clearTimeout","setTimeout","apply","filterIndex","rankList","i","length","tracks","getName","list","str","singer","name","album","map","item","index","getCount","count","Math","floor","elementStyle","document","createElement","style","vendor","transformNames","webkit","Moz","O","ms","standard","key","undefined","prefixStyle","console","log","charAt","toUpperCase","substr","formatPlayTime","interval","minute","second","toString","padStart","getRandomInt","min","max","random","shuffle","arr","new_arr","forEach","push","j","t","findIndex","song","id","getSongUrl","isEmptyObject","obj","Object","keys"],"mappings":"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","sourcesContent":["export const debounce = (func, delay) => {\n  let timer;\n  return function (...args) {\n    if (timer) {\n      clearTimeout(timer)\n    }\n    timer = setTimeout(() => {\n      func.apply(this, args);\n      clearTimeout(timer)\n    }, delay);\n  }\n}\n// 处理数据，找出第一个没有歌名的排行榜的索引\nexport const filterIndex = rankList => {\n  for (let i = 0; i < rankList.length - 1; i++) {\n    if (rankList[i].tracks.length && !rankList[i + 1].tracks.length) {\n      return i + 1;\n    }\n  }\n};\n\n// export const getName = list => {\n//   let str = \"\";\n//   list.map((item, index) => {\n//     str += index === 0 ? item.name : \"/\" + item.name;\n//     return item;\n//   });\n//   return str;\n// };\n\nexport const getName = list => {\n  let str = list.singer.name + '-' + list.album.name;\n  list.map((item, index) => {\n\n    str += list.singer.name + '-' + list.album.name;\n    return item\n  })\n  return str\n}\n\nexport const getCount = (count) => {\n  if(count < 0) return;\n  if(count < 10000) {\n    return count;\n  } else if(Math.floor(count / 10000) < 10000) {\n    return Math.floor(count/10000) + \"万\";\n  } else  {\n    return Math.floor(count / 10000000)/ 10 + \"亿\";\n  }\n}\n\n// 给css3相关属性增加浏览器前缀，处理浏览器兼容性问题\nlet elementStyle = document.createElement(\"div\").style;\n\nlet vendor = (() => {\n  //首先通过transition属性判断是何种浏览器\n  let transformNames = {\n    webkit: \"webkitTransform\",\n    Moz: \"MozTransform\",\n    O: \"OTransfrom\",\n    ms: \"msTransform\",\n    standard: \"Transform\"\n  };\n  for (let key in transformNames) {\n    if (elementStyle[transformNames[key]] !== undefined) {\n      return key;\n    }\n  }\n  return false;\n})();\n\n\n\n\n\n//trasfor属性具有兼容问题\nexport function prefixStyle(style) {\n  if(vendor === false) {\n    return false;\n  }\n  if(vendor === 'standard') {\n    return style\n  }\n  console.log(vendor + style.charAt(0).toUpperCase() + style.substr(1))//webkitTransform\n  return vendor + style.charAt(0).toUpperCase() + style.substr(1);\n}\n\n\n//转换歌曲播放时间\nexport const formatPlayTime = interval => {\n  interval = interval | 0;// |0表示向下取整\n  const minute = (interval / 60) | 0;\n  const second = (interval % 60).toString().padStart(2, \"0\");\n  return `${minute}:${second}`;\n};\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n// 随机算法\nexport function shuffle(arr) {\n  let new_arr = [];\n  arr.forEach(item => {\n    new_arr.push(item);\n  });\n  for (let i = 0; i < new_arr.length; i++) {\n    let j = getRandomInt(0, i);\n    let t = new_arr[i];\n    new_arr[i] = new_arr[j];\n    new_arr[j] = t;\n  }\n  return new_arr;\n}\n\n// 找到当前的歌曲索引\nexport const findIndex = (song, list) => {\n  return list.findIndex(item => {\n    return song.id === item.id;\n  });\n};\n\n//拼接出歌曲的url链接\nexport const getSongUrl = id => {\n  return `https://music.163.com/song/media/outer/url?id=${id}.mp3`;\n};\n\nexport const isEmptyObject = obj => !obj || Object.keys(obj).length === 0;"]},"metadata":{},"sourceType":"module"}