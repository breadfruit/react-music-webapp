{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Desktop/react-music-webapp/src/application/Recommend/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport Slider from '../../components/slider/';\nimport { connect } from \"react-redux\";\nimport * as actionTypes from './store/actionCreators';\nimport RecommendList from '../../components/list/';\nimport Scroll from '../../baseUI/scroll/index';\nimport { Content } from './style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Recommend(props) {\n  _s();\n\n  const {\n    bannerList,\n    recommendList\n  } = props;\n  const {\n    getBannerDataDispatch,\n    getRecommendListDataDispatch\n  } = props;\n  useEffect(() => {\n    getBannerDataDispatch();\n    getRecommendListDataDispatch(); //eslint-disable-next-line\n  }, []);\n  const bannerListJS = bannerList ? bannerList.toJS() : [];\n  const recommendListJS = recommendList ? recommendList.toJS() : [];\n  return /*#__PURE__*/_jsxDEV(Content, {\n    children: /*#__PURE__*/_jsxDEV(Scroll, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Slider, {\n          bannerList: bannerListJS\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RecommendList, {\n          recommendList: recommendListJS\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n} // 映射 Redux 全局的 state 到组件的 props 上\n\n\n_s(Recommend, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Recommend;\n\nconst mapStateToProps = state => ({\n  // 不要在这里将数据 toJS\n  // 不然每次 diff 比对 props 的时候都是不一样的引用，还是导致不必要的重渲染，属于滥用 immutable\n  bannerList: state.getIn(['recommend', 'bannerList']),\n  recommendList: state.getIn(['recommend', 'recommendList'])\n}); // 映射 dispatch 到 props 上\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getBannerDataDispatch() {\n      dispatch(actionTypes.getBannerList());\n    },\n\n    getRecommendListDataDispatch() {\n      dispatch(actionTypes.getRecommendList());\n    }\n\n  };\n}; // 将 ui 组件包装成容器组件\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/React.memo(Recommend));\n\nvar _c;\n\n$RefreshReg$(_c, \"Recommend\");","map":{"version":3,"sources":["/Users/macos/Desktop/react-music-webapp/src/application/Recommend/index.js"],"names":["React","useEffect","Slider","connect","actionTypes","RecommendList","Scroll","Content","Recommend","props","bannerList","recommendList","getBannerDataDispatch","getRecommendListDataDispatch","bannerListJS","toJS","recommendListJS","mapStateToProps","state","getIn","mapDispatchToProps","dispatch","getBannerList","getRecommendList","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SAASC,OAAT,QAAwB,SAAxB;;;AAEA,SAASC,SAAT,CAAoBC,KAApB,EAA0B;AAAA;;AACxB,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAgCF,KAAtC;AAEA,QAAM;AAAEG,IAAAA,qBAAF;AAAyBC,IAAAA;AAAzB,MAA0DJ,KAAhE;AAEAR,EAAAA,SAAS,CAAE,MAAM;AACfW,IAAAA,qBAAqB;AACrBC,IAAAA,4BAA4B,GAFb,CAGf;AACD,GAJQ,EAIN,EAJM,CAAT;AAMA,QAAMC,YAAY,GAAGJ,UAAU,GAAGA,UAAU,CAACK,IAAX,EAAH,GAAwB,EAAvD;AACA,QAAMC,eAAe,GAAGL,aAAa,GAAGA,aAAa,CAACI,IAAd,EAAH,GAA0B,EAA/D;AAEA,sBACE,QAAC,OAAD;AAAA,2BACE,QAAC,MAAD;AAAA,6BACE;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,UAAU,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,aAAD;AAAe,UAAA,aAAa,EAAEE;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,C,CAED;;;GA1BSR,S;;KAAAA,S;;AA2BT,MAAMS,eAAe,GAAIC,KAAD,KAAY;AAClC;AACA;AACAR,EAAAA,UAAU,EAAEQ,KAAK,CAACC,KAAN,CAAa,CAAC,WAAD,EAAc,YAAd,CAAb,CAHsB;AAIlCR,EAAAA,aAAa,EAAEO,KAAK,CAACC,KAAN,CAAa,CAAC,WAAD,EAAc,eAAd,CAAb;AAJmB,CAAZ,CAAxB,C,CAMA;;;AACA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLT,IAAAA,qBAAqB,GAAI;AACvBS,MAAAA,QAAQ,CAAEjB,WAAW,CAACkB,aAAZ,EAAF,CAAR;AACD,KAHI;;AAILT,IAAAA,4BAA4B,GAAI;AAC9BQ,MAAAA,QAAQ,CAAEjB,WAAW,CAACmB,gBAAZ,EAAF,CAAR;AACD;;AANI,GAAP;AAQD,CATD,C,CAWA;;;AACA,eAAepB,OAAO,CAAEc,eAAF,EAAmBG,kBAAnB,CAAP,eAA8CpB,KAAK,CAACwB,IAAN,CAAYhB,SAAZ,CAA9C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport Slider from '../../components/slider/';\nimport { connect } from \"react-redux\";\nimport * as actionTypes from './store/actionCreators';\nimport RecommendList from '../../components/list/';\nimport Scroll from '../../baseUI/scroll/index';\nimport { Content } from './style';\n\nfunction Recommend (props){\n  const { bannerList, recommendList } = props;\n\n  const { getBannerDataDispatch, getRecommendListDataDispatch } = props;\n\n  useEffect (() => {\n    getBannerDataDispatch ();\n    getRecommendListDataDispatch ();\n    //eslint-disable-next-line\n  }, []);\n\n  const bannerListJS = bannerList ? bannerList.toJS () : [];\n  const recommendListJS = recommendList ? recommendList.toJS () :[];\n\n  return (\n    <Content>\n      <Scroll>\n        <div>\n          <Slider bannerList={bannerListJS}></Slider>\n          <RecommendList recommendList={recommendListJS}></RecommendList>\n        </div>\n      </Scroll>\n    </Content> \n  );\n}\n\n// 映射 Redux 全局的 state 到组件的 props 上\nconst mapStateToProps = (state) => ({\n  // 不要在这里将数据 toJS\n  // 不然每次 diff 比对 props 的时候都是不一样的引用，还是导致不必要的重渲染，属于滥用 immutable\n  bannerList: state.getIn (['recommend', 'bannerList']),\n  recommendList: state.getIn (['recommend', 'recommendList']),\n});\n// 映射 dispatch 到 props 上\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getBannerDataDispatch () {\n      dispatch (actionTypes.getBannerList ());\n    },\n    getRecommendListDataDispatch () {\n      dispatch (actionTypes.getRecommendList ());\n    },\n  }\n};\n\n// 将 ui 组件包装成容器组件\nexport default connect (mapStateToProps, mapDispatchToProps)(React.memo (Recommend));\n"]},"metadata":{},"sourceType":"module"}